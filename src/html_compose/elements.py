from typing import TypeAlias, Union

from .attributes import (
    GlobalAttrs,
    AnchorAttrs,
    AreaAttrs,
    AudioAttrs,
    BaseAttrs,
    BlockquoteAttrs,
    BodyAttrs,
    ButtonAttrs,
    CanvasAttrs,
    ColAttrs,
    ColgroupAttrs,
    DataAttrs,
    DelAttrs,
    DetailsAttrs,
    DialogAttrs,
    EmbedAttrs,
    FieldsetAttrs,
    FormAttrs,
    IframeAttrs,
    ImgAttrs,
    InputAttrs,
    InsAttrs,
    LabelAttrs,
    LiAttrs,
    LinkAttrs,
    MapAttrs,
    MetaAttrs,
    MeterAttrs,
    ObjectAttrs,
    OlAttrs,
    OptgroupAttrs,
    OptionAttrs,
    OutputAttrs,
    ProgressAttrs,
    QAttrs,
    ScriptAttrs,
    SelectAttrs,
    SlotAttrs,
    SourceAttrs,
    StyleAttrs,
    TdAttrs,
    TemplateAttrs,
    TextareaAttrs,
    ThAttrs,
    TimeAttrs,
    TrackAttrs,
    VideoAttrs,
)
from .base_attribute import BaseAttribute
from .base_element import BaseElement

# This file is generated by tools/generate_elements.py


class a(BaseElement, GlobalAttrs, AnchorAttrs):
    """
    The <a> element.
    Description: Hyperlink
    Categories: flow phrasing* interactive palpable
    Parents: phrasing
    Children: transparent*
    Interface: HTMLAnchorElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        download: Union[str, AnchorAttrs.download] = None,
        href: Union[str, AnchorAttrs.href] = None,
        hreflang: Union[str, AnchorAttrs.hreflang] = None,
        ping: Union[str, AnchorAttrs.ping] = None,
        referrerpolicy: Union[str, AnchorAttrs.referrerpolicy] = None,
        rel: Union[str, AnchorAttrs.rel] = None,
        target: Union[str, AnchorAttrs.target] = None,
        type: Union[str, AnchorAttrs.type] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <a> element.
        Description: Hyperlink
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param download: Whether to download the resource instead of navigating to it, and its filename if so
            | Text
        :param href: Address of the hyperlink
            | Valid URL potentially surrounded by spaces
        :param hreflang: Language of the linked resource
            | Valid BCP 47 language tag
        :param ping: URLs to ping
            | Set of space-separated tokens consisting of valid non-empty URLs
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the location in the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param target: Navigable for hyperlink navigation
            | Valid navigable target name or keyword
        :param type: Hint for the type of the referenced resource
            | Valid MIME type string
        """
        super().__init__(
            "a",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("download", download)
        self._process_attr("href", href)
        self._process_attr("hreflang", hreflang)
        self._process_attr("ping", ping)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("rel", rel)
        self._process_attr("target", target)
        self._process_attr("type", type)


class abbr(BaseElement, GlobalAttrs):
    """
    The <abbr> element.
    Description: Abbreviation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <abbr> element.
        Description: Abbreviation
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "abbr",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class address(BaseElement, GlobalAttrs):
    """
    The <address> element.
    Description: Contact information for a page or article element
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <address> element.
        Description: Contact information for a page or article element
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "address",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class area(BaseElement, GlobalAttrs, AreaAttrs):
    """
    The <area> element.
    Description: Hyperlink or dead area on an image map
    Categories: flow phrasing
    Parents: phrasing*
    Children: empty
    Interface: HTMLAreaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        alt: Union[str, AreaAttrs.alt] = None,
        coords: Union[str, AreaAttrs.coords] = None,
        download: Union[str, AreaAttrs.download] = None,
        href: Union[str, AreaAttrs.href] = None,
        ping: Union[str, AreaAttrs.ping] = None,
        referrerpolicy: Union[str, AreaAttrs.referrerpolicy] = None,
        rel: Union[str, AreaAttrs.rel] = None,
        shape: Union[str, AreaAttrs.shape] = None,
        target: Union[str, AreaAttrs.target] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <area> element.
        Description: Hyperlink or dead area on an image map
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param alt: Replacement text for use when images are not available
            | Text*
        :param coords: Coordinates for the shape to be created in an image map
            | Valid list of floating-point numbers*
        :param download: Whether to download the resource instead of navigating to it, and its filename if so
            | Text
        :param href: Address of the hyperlink
            | Valid URL potentially surrounded by spaces
        :param ping: URLs to ping
            | Set of space-separated tokens consisting of valid non-empty URLs
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the location in the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param shape: The kind of shape to be created in an image map
            | ['circle', 'default', 'poly', 'rect']
        :param target: Navigable for hyperlink navigation
            | Valid navigable target name or keyword
        """
        super().__init__(
            "area",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("alt", alt)
        self._process_attr("coords", coords)
        self._process_attr("download", download)
        self._process_attr("href", href)
        self._process_attr("ping", ping)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("rel", rel)
        self._process_attr("shape", shape)
        self._process_attr("target", target)


class article(BaseElement, GlobalAttrs):
    """
    The <article> element.
    Description: Self-contained syndicatable or reusable composition
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <article> element.
        Description: Self-contained syndicatable or reusable composition
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "article",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class aside(BaseElement, GlobalAttrs):
    """
    The <aside> element.
    Description: Sidebar for tangentially related content
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <aside> element.
        Description: Sidebar for tangentially related content
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "aside",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class audio(BaseElement, GlobalAttrs, AudioAttrs):
    """
    The <audio> element.
    Description: Audio player
    Categories: flow phrasing embedded interactive palpable*
    Parents: phrasing
    Children: source* track* transparent*
    Interface: HTMLAudioElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        autoplay: Union[str, AudioAttrs.autoplay] = None,
        controls: Union[str, AudioAttrs.controls] = None,
        crossorigin: Union[str, AudioAttrs.crossorigin] = None,
        loop: Union[str, AudioAttrs.loop] = None,
        muted: Union[str, AudioAttrs.muted] = None,
        preload: Union[str, AudioAttrs.preload] = None,
        src: Union[str, AudioAttrs.src] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <audio> element.
        Description: Audio player
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param autoplay: Hint that the media resource can be started automatically when the page is loaded
            | Boolean attribute
        :param controls: Show user agent controls
            | Boolean attribute
        :param crossorigin: How the element handles crossorigin requests
            | ['anonymous', 'use-credentials']
        :param loop: Whether to loop the media resource
            | Boolean attribute
        :param muted: Whether to mute the media resource by default
            | Boolean attribute
        :param preload: Hints how much buffering the media resource will likely need
            | ['none', 'metadata', 'auto']
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        """
        super().__init__(
            "audio",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("autoplay", autoplay)
        self._process_attr("controls", controls)
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("loop", loop)
        self._process_attr("muted", muted)
        self._process_attr("preload", preload)
        self._process_attr("src", src)


class b(BaseElement, GlobalAttrs):
    """
    The <b> element.
    Description: Keywords
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <b> element.
        Description: Keywords
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "b",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class base(BaseElement, GlobalAttrs, BaseAttrs):
    """
    The <base> element.
    Description: Base URL and default target navigable for hyperlinks and forms
    Categories: metadata
    Parents: head
    Children: empty
    Interface: HTMLBaseElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        href: Union[str, BaseAttrs.href] = None,
        target: Union[str, BaseAttrs.target] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <base> element.
        Description: Base URL and default target navigable for hyperlinks and forms
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param href: Document base URL
            | Valid URL potentially surrounded by spaces
        :param target: Default navigable for hyperlink navigation and form submission
            | Valid navigable target name or keyword
        """
        super().__init__(
            "base",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("href", href)
        self._process_attr("target", target)


class bdi(BaseElement, GlobalAttrs):
    """
    The <bdi> element.
    Description: Text directionality isolation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <bdi> element.
        Description: Text directionality isolation
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "bdi",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class bdo(BaseElement, GlobalAttrs):
    """
    The <bdo> element.
    Description: Text directionality formatting
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <bdo> element.
        Description: Text directionality formatting
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "bdo",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class blockquote(BaseElement, GlobalAttrs, BlockquoteAttrs):
    """
    The <blockquote> element.
    Description: A section quoted from another source
    Categories: flow palpable
    Parents: flow
    Children: flow
    Interface: HTMLQuoteElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: Union[str, BlockquoteAttrs.cite] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <blockquote> element.
        Description: A section quoted from another source
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        """
        super().__init__(
            "blockquote",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("cite", cite)


class body(BaseElement, GlobalAttrs, BodyAttrs):
    """
    The <body> element.
    Description: Document body
    Categories: none
    Parents: html
    Children: flow
    Interface: HTMLBodyElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        onafterprint: Union[str, BodyAttrs.onafterprint] = None,
        onbeforeprint: Union[str, BodyAttrs.onbeforeprint] = None,
        onbeforeunload: Union[str, BodyAttrs.onbeforeunload] = None,
        onhashchange: Union[str, BodyAttrs.onhashchange] = None,
        onlanguagechange: Union[str, BodyAttrs.onlanguagechange] = None,
        onmessage: Union[str, BodyAttrs.onmessage] = None,
        onmessageerror: Union[str, BodyAttrs.onmessageerror] = None,
        onoffline: Union[str, BodyAttrs.onoffline] = None,
        ononline: Union[str, BodyAttrs.ononline] = None,
        onpagehide: Union[str, BodyAttrs.onpagehide] = None,
        onpagereveal: Union[str, BodyAttrs.onpagereveal] = None,
        onpageshow: Union[str, BodyAttrs.onpageshow] = None,
        onpageswap: Union[str, BodyAttrs.onpageswap] = None,
        onpopstate: Union[str, BodyAttrs.onpopstate] = None,
        onrejectionhandled: Union[str, BodyAttrs.onrejectionhandled] = None,
        onstorage: Union[str, BodyAttrs.onstorage] = None,
        onunhandledrejection: Union[str, BodyAttrs.onunhandledrejection] = None,
        onunload: Union[str, BodyAttrs.onunload] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <body> element.
        Description: Document body
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param onafterprint: afterprint event handler for Window object
            | Event handler content attribute
        :param onbeforeprint: beforeprint event handler for Window object
            | Event handler content attribute
        :param onbeforeunload: beforeunload event handler for Window object
            | Event handler content attribute
        :param onhashchange: hashchange event handler for Window object
            | Event handler content attribute
        :param onlanguagechange: languagechange event handler for Window object
            | Event handler content attribute
        :param onmessage: message event handler for Window object
            | Event handler content attribute
        :param onmessageerror: messageerror event handler for Window object
            | Event handler content attribute
        :param onoffline: offline event handler for Window object
            | Event handler content attribute
        :param ononline: online event handler for Window object
            | Event handler content attribute
        :param onpagehide: pagehide event handler for Window object
            | Event handler content attribute
        :param onpagereveal: pagereveal event handler for Window object
            | Event handler content attribute
        :param onpageshow: pageshow event handler for Window object
            | Event handler content attribute
        :param onpageswap: pageswap event handler for Window object
            | Event handler content attribute
        :param onpopstate: popstate event handler for Window object
            | Event handler content attribute
        :param onrejectionhandled: rejectionhandled event handler for Window object
            | Event handler content attribute
        :param onstorage: storage event handler for Window object
            | Event handler content attribute
        :param onunhandledrejection: unhandledrejection event handler for Window object
            | Event handler content attribute
        :param onunload: unload event handler for Window object
            | Event handler content attribute
        """
        super().__init__(
            "body",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("onafterprint", onafterprint)
        self._process_attr("onbeforeprint", onbeforeprint)
        self._process_attr("onbeforeunload", onbeforeunload)
        self._process_attr("onhashchange", onhashchange)
        self._process_attr("onlanguagechange", onlanguagechange)
        self._process_attr("onmessage", onmessage)
        self._process_attr("onmessageerror", onmessageerror)
        self._process_attr("onoffline", onoffline)
        self._process_attr("ononline", ononline)
        self._process_attr("onpagehide", onpagehide)
        self._process_attr("onpagereveal", onpagereveal)
        self._process_attr("onpageshow", onpageshow)
        self._process_attr("onpageswap", onpageswap)
        self._process_attr("onpopstate", onpopstate)
        self._process_attr("onrejectionhandled", onrejectionhandled)
        self._process_attr("onstorage", onstorage)
        self._process_attr("onunhandledrejection", onunhandledrejection)
        self._process_attr("onunload", onunload)


class br(BaseElement, GlobalAttrs):
    """
    The <br> element.
    Description: Line break, e.g. in poem or postal address
    Categories: flow phrasing
    Parents: phrasing
    Children: empty
    Interface: HTMLBRElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <br> element.
        Description: Line break, e.g. in poem or postal address
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "br",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class button(BaseElement, GlobalAttrs, ButtonAttrs):
    """
    The <button> element.
    Description: Button control
    Categories: flow phrasing interactive listed labelable submittable form-associated palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLButtonElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: Union[str, ButtonAttrs.disabled] = None,
        form: Union[str, ButtonAttrs.form] = None,
        formaction: Union[str, ButtonAttrs.formaction] = None,
        formenctype: Union[str, ButtonAttrs.formenctype] = None,
        formmethod: Union[str, ButtonAttrs.formmethod] = None,
        formnovalidate: Union[str, ButtonAttrs.formnovalidate] = None,
        formtarget: Union[str, ButtonAttrs.formtarget] = None,
        name: Union[str, ButtonAttrs.name] = None,
        popovertarget: Union[str, ButtonAttrs.popovertarget] = None,
        popovertargetaction: Union[str, ButtonAttrs.popovertargetaction] = None,
        type: Union[str, ButtonAttrs.type] = None,
        value: Union[str, ButtonAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <button> element.
        Description: Button control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param form: Associates the element with a form element
            | ID*
        :param formaction: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param formenctype: Entry list encoding type to use for form submission
            | ['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']
        :param formmethod: Variant to use for form submission
            | ['GET', 'POST', 'dialog']
        :param formnovalidate: Bypass form control validation for form submission
            | Boolean attribute
        :param formtarget: Navigable for form submission
            | Valid navigable target name or keyword
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        :param popovertarget: Targets a popover element to toggle, show, or hide
            | ID*
        :param popovertargetaction: Indicates whether a targeted popover element is to be toggled, shown, or hidden
            | ['toggle', 'show', 'hide']
        :param type: Type of button
            | ['submit', 'reset', 'button']
        :param value: Value to be used for form submission
            | Text
        """
        super().__init__(
            "button",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)
        self._process_attr("formaction", formaction)
        self._process_attr("formenctype", formenctype)
        self._process_attr("formmethod", formmethod)
        self._process_attr("formnovalidate", formnovalidate)
        self._process_attr("formtarget", formtarget)
        self._process_attr("name", name)
        self._process_attr("popovertarget", popovertarget)
        self._process_attr("popovertargetaction", popovertargetaction)
        self._process_attr("type", type)
        self._process_attr("value", value)


class canvas(BaseElement, GlobalAttrs, CanvasAttrs):
    """
    The <canvas> element.
    Description: Scriptable bitmap canvas
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLCanvasElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: Union[str, CanvasAttrs.height] = None,
        width: Union[str, CanvasAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <canvas> element.
        Description: Scriptable bitmap canvas
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param height: Vertical dimension
            | Valid non-negative integer
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "canvas",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("height", height)
        self._process_attr("width", width)


class caption(BaseElement, GlobalAttrs):
    """
    The <caption> element.
    Description: Table caption
    Categories: none
    Parents: table
    Children: flow*
    Interface: HTMLTableCaptionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <caption> element.
        Description: Table caption
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "caption",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class cite(BaseElement, GlobalAttrs):
    """
    The <cite> element.
    Description: Title of a work
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <cite> element.
        Description: Title of a work
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "cite",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class code(BaseElement, GlobalAttrs):
    """
    The <code> element.
    Description: Computer code
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <code> element.
        Description: Computer code
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "code",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class col(BaseElement, GlobalAttrs, ColAttrs):
    """
    The <col> element.
    Description: Table column
    Categories: none
    Parents: colgroup
    Children: empty
    Interface: HTMLTableColElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        span: Union[str, ColAttrs.span] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <col> element.
        Description: Table column
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param span: Number of columns spanned by the element
            | Valid non-negative integer greater than zero
        """
        super().__init__(
            "col",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("span", span)


class colgroup(BaseElement, GlobalAttrs, ColgroupAttrs):
    """
    The <colgroup> element.
    Description: Group of columns in a table
    Categories: none
    Parents: table
    Children: col* template*
    Interface: HTMLTableColElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        span: Union[str, ColgroupAttrs.span] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <colgroup> element.
        Description: Group of columns in a table
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param span: Number of columns spanned by the element
            | Valid non-negative integer greater than zero
        """
        super().__init__(
            "colgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("span", span)


class data(BaseElement, GlobalAttrs, DataAttrs):
    """
    The <data> element.
    Description: Machine-readable equivalent
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLDataElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        value: Union[str, DataAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <data> element.
        Description: Machine-readable equivalent
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param value: Machine-readable value
            | Text*
        """
        super().__init__(
            "data",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("value", value)


class datalist(BaseElement, GlobalAttrs):
    """
    The <datalist> element.
    Description: Container for options for combo box control
    Categories: flow phrasing
    Parents: phrasing
    Children: phrasing* option* script-supporting elements*
    Interface: HTMLDataListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <datalist> element.
        Description: Container for options for combo box control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "datalist",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class dd(BaseElement, GlobalAttrs):
    """
    The <dd> element.
    Description: Content for corresponding dt element(s)
    Categories: none
    Parents: dl div*
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <dd> element.
        Description: Content for corresponding dt element(s)
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "dd",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class del_(BaseElement, GlobalAttrs, DelAttrs):
    """
    The <del> element.
    Description: A removal from the document
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLModElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: Union[str, DelAttrs.cite] = None,
        datetime: Union[str, DelAttrs.datetime] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <del> element.
        Description: A removal from the document
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param datetime: Date and (optionally) time of the change
            | Valid date string with optional time
        """
        super().__init__(
            "del",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("cite", cite)
        self._process_attr("datetime", datetime)


class details(BaseElement, GlobalAttrs, DetailsAttrs):
    """
    The <details> element.
    Description: Disclosure control for hiding details
    Categories: flow interactive palpable
    Parents: flow
    Children: summary* flow
    Interface: HTMLDetailsElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: Union[str, DetailsAttrs.name] = None,
        open: Union[str, DetailsAttrs.open] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <details> element.
        Description: Disclosure control for hiding details
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param name: Name of group of mutually-exclusive details elements
            | Text*
        :param open: Whether the details are visible
            | Boolean attribute
        """
        super().__init__(
            "details",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("name", name)
        self._process_attr("open", open)


class dfn(BaseElement, GlobalAttrs):
    """
    The <dfn> element.
    Description: Defining instance
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <dfn> element.
        Description: Defining instance
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "dfn",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class dialog(BaseElement, GlobalAttrs, DialogAttrs):
    """
    The <dialog> element.
    Description: Dialog box or window
    Categories: flow
    Parents: flow
    Children: flow
    Interface: HTMLDialogElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        open: Union[str, DialogAttrs.open] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <dialog> element.
        Description: Dialog box or window
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param open: Whether the dialog box is showing
            | Boolean attribute
        """
        super().__init__(
            "dialog",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("open", open)


class div(BaseElement, GlobalAttrs):
    """
    The <div> element.
    Description: Generic flow container, or container for name-value groups in dl elements
    Categories: flow palpable
    Parents: flow dl
    Children: flow
    Interface: HTMLDivElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <div> element.
        Description: Generic flow container, or container for name-value groups in dl elements
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "div",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class dl(BaseElement, GlobalAttrs):
    """
    The <dl> element.
    Description: Association list consisting of zero or more name-value groups
    Categories: flow palpable
    Parents: flow
    Children: dt* dd* div* script-supporting elements
    Interface: HTMLDListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <dl> element.
        Description: Association list consisting of zero or more name-value groups
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "dl",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class dt(BaseElement, GlobalAttrs):
    """
    The <dt> element.
    Description: Legend for corresponding dd element(s)
    Categories: none
    Parents: dl div*
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <dt> element.
        Description: Legend for corresponding dd element(s)
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "dt",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class em(BaseElement, GlobalAttrs):
    """
    The <em> element.
    Description: Stress emphasis
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <em> element.
        Description: Stress emphasis
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "em",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class embed(BaseElement, GlobalAttrs, EmbedAttrs):
    """
    The <embed> element.
    Description: Plugin
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: empty
    Interface: HTMLEmbedElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: Union[str, EmbedAttrs.height] = None,
        src: Union[str, EmbedAttrs.src] = None,
        type: Union[str, EmbedAttrs.type] = None,
        width: Union[str, EmbedAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <embed> element.
        Description: Plugin
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param height: Vertical dimension
            | Valid non-negative integer
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "embed",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("height", height)
        self._process_attr("src", src)
        self._process_attr("type", type)
        self._process_attr("width", width)


class fieldset(BaseElement, GlobalAttrs, FieldsetAttrs):
    """
    The <fieldset> element.
    Description: Group of form controls
    Categories: flow listed form-associated palpable
    Parents: flow
    Children: legend* flow
    Interface: HTMLFieldSetElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: Union[str, FieldsetAttrs.disabled] = None,
        form: Union[str, FieldsetAttrs.form] = None,
        name: Union[str, FieldsetAttrs.name] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <fieldset> element.
        Description: Group of form controls
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param disabled: Whether the descendant form controls, except any inside legend, are disabled
            | Boolean attribute
        :param form: Associates the element with a form element
            | ID*
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        """
        super().__init__(
            "fieldset",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)
        self._process_attr("name", name)


class figcaption(BaseElement, GlobalAttrs):
    """
    The <figcaption> element.
    Description: Caption for figure
    Categories: none
    Parents: figure
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <figcaption> element.
        Description: Caption for figure
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "figcaption",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class figure(BaseElement, GlobalAttrs):
    """
    The <figure> element.
    Description: Figure with optional caption
    Categories: flow palpable
    Parents: flow
    Children: figcaption* flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <figure> element.
        Description: Figure with optional caption
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "figure",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class footer(BaseElement, GlobalAttrs):
    """
    The <footer> element.
    Description: Footer for a page or section
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <footer> element.
        Description: Footer for a page or section
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "footer",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class form(BaseElement, GlobalAttrs, FormAttrs):
    """
    The <form> element.
    Description: User-submittable form
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLFormElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        accept_charset: Union[str, FormAttrs.accept_charset] = None,
        action: Union[str, FormAttrs.action] = None,
        autocomplete: Union[str, FormAttrs.autocomplete] = None,
        enctype: Union[str, FormAttrs.enctype] = None,
        method: Union[str, FormAttrs.method] = None,
        name: Union[str, FormAttrs.name] = None,
        novalidate: Union[str, FormAttrs.novalidate] = None,
        target: Union[str, FormAttrs.target] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <form> element.
        Description: User-submittable form
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param accept_charset: Character encodings to use for form submission
            | ASCII case-insensitive match for "UTF-8"
        :param action: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param autocomplete: Default setting for autofill feature for controls in the form
            | ['on', 'off']
        :param enctype: Entry list encoding type to use for form submission
            | ['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']
        :param method: Variant to use for form submission
            | ['GET', 'POST', 'dialog']
        :param name: Name of form to use in the document.forms API
            | Text*
        :param novalidate: Bypass form control validation for form submission
            | Boolean attribute
        :param target: Navigable for form submission
            | Valid navigable target name or keyword
        """
        super().__init__(
            "form",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("accept-charset", accept_charset)
        self._process_attr("action", action)
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("enctype", enctype)
        self._process_attr("method", method)
        self._process_attr("name", name)
        self._process_attr("novalidate", novalidate)
        self._process_attr("target", target)


class h1(BaseElement, GlobalAttrs):
    """
    The <h1> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h1> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h1",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class h2(BaseElement, GlobalAttrs):
    """
    The <h2> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h2> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h2",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class h3(BaseElement, GlobalAttrs):
    """
    The <h3> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h3> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h3",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class h4(BaseElement, GlobalAttrs):
    """
    The <h4> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h4> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h4",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class h5(BaseElement, GlobalAttrs):
    """
    The <h5> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h5> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h5",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class h6(BaseElement, GlobalAttrs):
    """
    The <h6> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <h6> element.
        Description: Heading
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "h6",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class head(BaseElement, GlobalAttrs):
    """
    The <head> element.
    Description: Container for document metadata
    Categories: none
    Parents: html
    Children: metadata content*
    Interface: HTMLHeadElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <head> element.
        Description: Container for document metadata
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "head",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class header(BaseElement, GlobalAttrs):
    """
    The <header> element.
    Description: Introductory or navigational aids for a page or section
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <header> element.
        Description: Introductory or navigational aids for a page or section
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "header",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class hgroup(BaseElement, GlobalAttrs):
    """
    The <hgroup> element.
    Description: Heading container
    Categories: flow palpable
    Parents: legend summary flow
    Children: h1 h2 h3 h4 h5 h6 script-supporting elements
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <hgroup> element.
        Description: Heading container
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "hgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class hr(BaseElement, GlobalAttrs):
    """
    The <hr> element.
    Description: Thematic break
    Categories: flow
    Parents: flow
    Children: empty
    Interface: HTMLHRElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <hr> element.
        Description: Thematic break
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "hr",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class html(BaseElement, GlobalAttrs):
    """
    The <html> element.
    Description: Root element
    Categories: none
    Parents: none*
    Children: head* body*
    Interface: HTMLHtmlElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <html> element.
        Description: Root element
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "html",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class i(BaseElement, GlobalAttrs):
    """
    The <i> element.
    Description: Alternate voice
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <i> element.
        Description: Alternate voice
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "i",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class iframe(BaseElement, GlobalAttrs, IframeAttrs):
    """
    The <iframe> element.
    Description: Child navigable
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: empty
    Interface: HTMLIFrameElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        allow: Union[str, IframeAttrs.allow] = None,
        allowfullscreen: Union[str, IframeAttrs.allowfullscreen] = None,
        height: Union[str, IframeAttrs.height] = None,
        loading: Union[str, IframeAttrs.loading] = None,
        name: Union[str, IframeAttrs.name] = None,
        referrerpolicy: Union[str, IframeAttrs.referrerpolicy] = None,
        sandbox: Union[str, IframeAttrs.sandbox] = None,
        src: Union[str, IframeAttrs.src] = None,
        srcdoc: Union[str, IframeAttrs.srcdoc] = None,
        width: Union[str, IframeAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <iframe> element.
        Description: Child navigable
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param allow: Permissions policy to be applied to the iframe's contents
            | Serialized permissions policy
        :param allowfullscreen: Whether to allow the iframe's contents to use requestFullscreen()
            | Boolean attribute
        :param height: Vertical dimension
            | Valid non-negative integer
        :param loading: Used when determining loading deferral
            | ['lazy', 'eager']
        :param name: Name of content navigable
            | Valid navigable target name or keyword
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param sandbox: Security rules for nested content
            | Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of "allow-downloads" "allow-forms" "allow-modals" "allow-orientation-lock" "allow-pointer-lock" "allow-popups" "allow-popups-to-escape-sandbox" "allow-presentation" "allow-same-origin" "allow-scripts" "allow-top-navigation" "allow-top-navigation-by-user-activation" "allow-top-navigation-to-custom-protocols"
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcdoc: A document to render in the iframe
            | The source of an iframe srcdoc document*
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "iframe",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("allow", allow)
        self._process_attr("allowfullscreen", allowfullscreen)
        self._process_attr("height", height)
        self._process_attr("loading", loading)
        self._process_attr("name", name)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("sandbox", sandbox)
        self._process_attr("src", src)
        self._process_attr("srcdoc", srcdoc)
        self._process_attr("width", width)


class img(BaseElement, GlobalAttrs, ImgAttrs):
    """
    The <img> element.
    Description: Image
    Categories: flow phrasing embedded interactive* form-associated palpable
    Parents: phrasing picture
    Children: empty
    Interface: HTMLImageElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        alt: Union[str, ImgAttrs.alt] = None,
        crossorigin: Union[str, ImgAttrs.crossorigin] = None,
        decoding: Union[str, ImgAttrs.decoding] = None,
        fetchpriority: Union[str, ImgAttrs.fetchpriority] = None,
        height: Union[str, ImgAttrs.height] = None,
        ismap: Union[str, ImgAttrs.ismap] = None,
        loading: Union[str, ImgAttrs.loading] = None,
        referrerpolicy: Union[str, ImgAttrs.referrerpolicy] = None,
        sizes: Union[str, ImgAttrs.sizes] = None,
        src: Union[str, ImgAttrs.src] = None,
        srcset: Union[str, ImgAttrs.srcset] = None,
        usemap: Union[str, ImgAttrs.usemap] = None,
        width: Union[str, ImgAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <img> element.
        Description: Image
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param alt: Replacement text for use when images are not available
            | Text*
        :param crossorigin: How the element handles crossorigin requests
            | ['anonymous', 'use-credentials']
        :param decoding: Decoding hint to use when processing this image for presentation
            | ['sync', 'async', 'auto']
        :param fetchpriority: Sets the priority for fetches initiated by the element
            | ['auto', 'high', 'low']
        :param height: Vertical dimension
            | Valid non-negative integer
        :param ismap: Whether the image is a server-side image map
            | Boolean attribute
        :param loading: Used when determining loading deferral
            | ['lazy', 'eager']
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param sizes: Image sizes for different page layouts
            | Valid source size list
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc.
            | Comma-separated list of image candidate strings
        :param usemap: Name of image map to use
            | Valid hash-name reference*
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "img",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("alt", alt)
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("decoding", decoding)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("height", height)
        self._process_attr("ismap", ismap)
        self._process_attr("loading", loading)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("sizes", sizes)
        self._process_attr("src", src)
        self._process_attr("srcset", srcset)
        self._process_attr("usemap", usemap)
        self._process_attr("width", width)


class input(BaseElement, GlobalAttrs, InputAttrs):
    """
    The <input> element.
    Description: Form control
    Categories: flow phrasing interactive* listed labelable submittable resettable form-associated palpable*
    Parents: phrasing
    Children: empty
    Interface: HTMLInputElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        accept: Union[str, InputAttrs.accept] = None,
        alpha: Union[str, InputAttrs.alpha] = None,
        alt: Union[str, InputAttrs.alt] = None,
        autocomplete: Union[str, InputAttrs.autocomplete] = None,
        checked: Union[str, InputAttrs.checked] = None,
        colorspace: Union[str, InputAttrs.colorspace] = None,
        dirname: Union[str, InputAttrs.dirname] = None,
        disabled: Union[str, InputAttrs.disabled] = None,
        form: Union[str, InputAttrs.form] = None,
        formaction: Union[str, InputAttrs.formaction] = None,
        formenctype: Union[str, InputAttrs.formenctype] = None,
        formmethod: Union[str, InputAttrs.formmethod] = None,
        formnovalidate: Union[str, InputAttrs.formnovalidate] = None,
        formtarget: Union[str, InputAttrs.formtarget] = None,
        height: Union[str, InputAttrs.height] = None,
        list: Union[str, InputAttrs.list] = None,
        max: Union[str, InputAttrs.max] = None,
        maxlength: Union[str, InputAttrs.maxlength] = None,
        min: Union[str, InputAttrs.min] = None,
        minlength: Union[str, InputAttrs.minlength] = None,
        multiple: Union[str, InputAttrs.multiple] = None,
        name: Union[str, InputAttrs.name] = None,
        pattern: Union[str, InputAttrs.pattern] = None,
        placeholder: Union[str, InputAttrs.placeholder] = None,
        popovertarget: Union[str, InputAttrs.popovertarget] = None,
        popovertargetaction: Union[str, InputAttrs.popovertargetaction] = None,
        readonly: Union[str, InputAttrs.readonly] = None,
        required: Union[str, InputAttrs.required] = None,
        size: Union[str, InputAttrs.size] = None,
        src: Union[str, InputAttrs.src] = None,
        step: Union[str, InputAttrs.step] = None,
        title: Union[str, InputAttrs.title] = None,
        type: Union[str, InputAttrs.type] = None,
        value: Union[str, InputAttrs.value] = None,
        width: Union[str, InputAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <input> element.
        Description: Form control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param accept: Hint for expected file type in file upload controls
            | Set of comma-separated tokens* consisting of valid MIME type strings with no parameters or audio/*, video/*, or image/*
        :param alpha: Allow the color's alpha component to be set
            | Boolean attribute
        :param alt: Replacement text for use when images are not available
            | Text*
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param checked: Whether the control is checked
            | Boolean attribute
        :param colorspace: The color space of the serialized color
            | ['limited-srgb', 'display-p3']
        :param dirname: Name of form control to use for sending the element's directionality in form submission
            | Text*
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param form: Associates the element with a form element
            | ID*
        :param formaction: URL to use for form submission
            | Valid non-empty URL potentially surrounded by spaces
        :param formenctype: Entry list encoding type to use for form submission
            | ['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']
        :param formmethod: Variant to use for form submission
            | ['GET', 'POST', 'dialog']
        :param formnovalidate: Bypass form control validation for form submission
            | Boolean attribute
        :param formtarget: Navigable for form submission
            | Valid navigable target name or keyword
        :param height: Vertical dimension
            | Valid non-negative integer
        :param list: List of autocomplete options
            | ID*
        :param max: Maximum value
            | Varies*
        :param maxlength: Maximum length of value
            | Valid non-negative integer
        :param min: Minimum value
            | Varies*
        :param minlength: Minimum length of value
            | Valid non-negative integer
        :param multiple: Whether to allow multiple values
            | Boolean attribute
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        :param pattern: Pattern to be matched by the form control's value
            | Regular expression matching the JavaScript Pattern production
        :param placeholder: User-visible label to be placed within the form control
            | Text*
        :param popovertarget: Targets a popover element to toggle, show, or hide
            | ID*
        :param popovertargetaction: Indicates whether a targeted popover element is to be toggled, shown, or hidden
            | ['toggle', 'show', 'hide']
        :param readonly: Whether to allow the value to be edited by the user
            | Boolean attribute
        :param required: Whether the control is required for form submission
            | Boolean attribute
        :param size: Size of the control
            | Valid non-negative integer greater than zero
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param step: Granularity to be matched by the form control's value
            | Valid floating-point number greater than zero, or "any"
        :param title: Description of pattern (when used with pattern attribute)
            | Text
        :param type: Type of form control
            | input type keyword
        :param value: Value of the form control
            | Varies*
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "input",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("accept", accept)
        self._process_attr("alpha", alpha)
        self._process_attr("alt", alt)
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("checked", checked)
        self._process_attr("colorspace", colorspace)
        self._process_attr("dirname", dirname)
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)
        self._process_attr("formaction", formaction)
        self._process_attr("formenctype", formenctype)
        self._process_attr("formmethod", formmethod)
        self._process_attr("formnovalidate", formnovalidate)
        self._process_attr("formtarget", formtarget)
        self._process_attr("height", height)
        self._process_attr("list", list)
        self._process_attr("max", max)
        self._process_attr("maxlength", maxlength)
        self._process_attr("min", min)
        self._process_attr("minlength", minlength)
        self._process_attr("multiple", multiple)
        self._process_attr("name", name)
        self._process_attr("pattern", pattern)
        self._process_attr("placeholder", placeholder)
        self._process_attr("popovertarget", popovertarget)
        self._process_attr("popovertargetaction", popovertargetaction)
        self._process_attr("readonly", readonly)
        self._process_attr("required", required)
        self._process_attr("size", size)
        self._process_attr("src", src)
        self._process_attr("step", step)
        self._process_attr("title", title)
        self._process_attr("type", type)
        self._process_attr("value", value)
        self._process_attr("width", width)


class ins(BaseElement, GlobalAttrs, InsAttrs):
    """
    The <ins> element.
    Description: An addition to the document
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLModElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: Union[str, InsAttrs.cite] = None,
        datetime: Union[str, InsAttrs.datetime] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <ins> element.
        Description: An addition to the document
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        :param datetime: Date and (optionally) time of the change
            | Valid date string with optional time
        """
        super().__init__(
            "ins",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("cite", cite)
        self._process_attr("datetime", datetime)


class kbd(BaseElement, GlobalAttrs):
    """
    The <kbd> element.
    Description: User input
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <kbd> element.
        Description: User input
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "kbd",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class label(BaseElement, GlobalAttrs, LabelAttrs):
    """
    The <label> element.
    Description: Caption for a form control
    Categories: flow phrasing interactive palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLLabelElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        for_: Union[str, LabelAttrs.for_] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <label> element.
        Description: Caption for a form control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param for_: Associate the label with form control
            | ID*
        """
        super().__init__(
            "label",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("for", for_)


class legend(BaseElement, GlobalAttrs):
    """
    The <legend> element.
    Description: Caption for fieldset
    Categories: none
    Parents: fieldset
    Children: phrasing heading content
    Interface: HTMLLegendElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <legend> element.
        Description: Caption for fieldset
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "legend",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class li(BaseElement, GlobalAttrs, LiAttrs):
    """
    The <li> element.
    Description: List item
    Categories: none
    Parents: ol ul menu*
    Children: flow
    Interface: HTMLLIElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        value: Union[str, LiAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <li> element.
        Description: List item
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param value: Ordinal value of the list item
            | Valid integer
        """
        super().__init__(
            "li",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("value", value)


class link(BaseElement, GlobalAttrs, LinkAttrs):
    """
    The <link> element.
    Description: Link metadata
    Categories: metadata flow* phrasing*
    Parents: head noscript* phrasing*
    Children: empty
    Interface: HTMLLinkElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        as_: Union[str, LinkAttrs.as_] = None,
        blocking: Union[str, LinkAttrs.blocking] = None,
        color: Union[str, LinkAttrs.color] = None,
        crossorigin: Union[str, LinkAttrs.crossorigin] = None,
        disabled: Union[str, LinkAttrs.disabled] = None,
        fetchpriority: Union[str, LinkAttrs.fetchpriority] = None,
        href: Union[str, LinkAttrs.href] = None,
        hreflang: Union[str, LinkAttrs.hreflang] = None,
        imagesizes: Union[str, LinkAttrs.imagesizes] = None,
        imagesrcset: Union[str, LinkAttrs.imagesrcset] = None,
        integrity: Union[str, LinkAttrs.integrity] = None,
        media: Union[str, LinkAttrs.media] = None,
        referrerpolicy: Union[str, LinkAttrs.referrerpolicy] = None,
        rel: Union[str, LinkAttrs.rel] = None,
        sizes: Union[str, LinkAttrs.sizes] = None,
        title: Union[str, LinkAttrs.title] = None,
        type: Union[str, LinkAttrs.type] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <link> element.
        Description: Link metadata
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param as_: Potential destination for a preload request (for rel="preload" and rel="modulepreload")
            | Potential destination, for rel="preload"; script-like destination, for rel="modulepreload"
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param color: Color to use when customizing a site's icon (for rel="mask-icon")
            | CSS <color>
        :param crossorigin: How the element handles crossorigin requests
            | ['anonymous', 'use-credentials']
        :param disabled: Whether the link is disabled
            | Boolean attribute
        :param fetchpriority: Sets the priority for fetches initiated by the element
            | ['auto', 'high', 'low']
        :param href: Address of the hyperlink
            | Valid non-empty URL potentially surrounded by spaces
        :param hreflang: Language of the linked resource
            | Valid BCP 47 language tag
        :param imagesizes: Image sizes for different page layouts (for rel="preload")
            | Valid source size list
        :param imagesrcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload")
            | Comma-separated list of image candidate strings
        :param integrity: Integrity metadata used in Subresource Integrity checks [SRI]
            | Text
        :param media: Applicable media
            | Valid media query list
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param rel: Relationship between the document containing the hyperlink and the destination resource
            | Unordered set of unique space-separated tokens*
        :param sizes: Sizes of the icons (for rel="icon")
            | Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of sizes*
        :param title: Title of the link
            | Text
        :param title: CSS style sheet set name
            | Text
        :param type: Hint for the type of the referenced resource
            | Valid MIME type string
        """
        super().__init__(
            "link",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("as", as_)
        self._process_attr("blocking", blocking)
        self._process_attr("color", color)
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("disabled", disabled)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("href", href)
        self._process_attr("hreflang", hreflang)
        self._process_attr("imagesizes", imagesizes)
        self._process_attr("imagesrcset", imagesrcset)
        self._process_attr("integrity", integrity)
        self._process_attr("media", media)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("rel", rel)
        self._process_attr("sizes", sizes)
        self._process_attr("title", title)
        self._process_attr("type", type)


class main(BaseElement, GlobalAttrs):
    """
    The <main> element.
    Description: Container for the dominant contents of the document
    Categories: flow palpable
    Parents: flow*
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <main> element.
        Description: Container for the dominant contents of the document
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "main",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class map(BaseElement, GlobalAttrs, MapAttrs):
    """
    The <map> element.
    Description: Image map
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent area*
    Interface: HTMLMapElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: Union[str, MapAttrs.name] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <map> element.
        Description: Image map
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param name: Name of image map to reference from the usemap attribute
            | Text*
        """
        super().__init__(
            "map",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("name", name)


class mark(BaseElement, GlobalAttrs):
    """
    The <mark> element.
    Description: Highlight
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <mark> element.
        Description: Highlight
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "mark",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class menu(BaseElement, GlobalAttrs):
    """
    The <menu> element.
    Description: Menu of commands
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLMenuElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <menu> element.
        Description: Menu of commands
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "menu",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class meta(BaseElement, GlobalAttrs, MetaAttrs):
    """
    The <meta> element.
    Description: Text metadata
    Categories: metadata flow* phrasing*
    Parents: head noscript* phrasing*
    Children: empty
    Interface: HTMLMetaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        charset: Union[str, MetaAttrs.charset] = None,
        content: Union[str, MetaAttrs.content] = None,
        http_equiv: Union[str, MetaAttrs.http_equiv] = None,
        media: Union[str, MetaAttrs.media] = None,
        name: Union[str, MetaAttrs.name] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <meta> element.
        Description: Text metadata
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param charset: Character encoding declaration
            | ['utf-8']
        :param content: Value of the element
            | Text*
        :param http_equiv: Pragma directive
            | ['content-type', 'default-style', 'refresh', 'x-ua-compatible', 'content-security-policy']
        :param media: Applicable media
            | Valid media query list
        :param name: Metadata name
            | Text*
        """
        super().__init__(
            "meta",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("charset", charset)
        self._process_attr("content", content)
        self._process_attr("http-equiv", http_equiv)
        self._process_attr("media", media)
        self._process_attr("name", name)


class meter(BaseElement, GlobalAttrs, MeterAttrs):
    """
    The <meter> element.
    Description: Gauge
    Categories: flow phrasing labelable palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLMeterElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        high: Union[str, MeterAttrs.high] = None,
        low: Union[str, MeterAttrs.low] = None,
        max: Union[str, MeterAttrs.max] = None,
        min: Union[str, MeterAttrs.min] = None,
        optimum: Union[str, MeterAttrs.optimum] = None,
        value: Union[str, MeterAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <meter> element.
        Description: Gauge
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param high: Low limit of high range
            | Valid floating-point number*
        :param low: High limit of low range
            | Valid floating-point number*
        :param max: Upper bound of range
            | Valid floating-point number*
        :param min: Lower bound of range
            | Valid floating-point number*
        :param optimum: Optimum value in gauge
            | Valid floating-point number*
        :param value: Current value of the element
            | Valid floating-point number
        """
        super().__init__(
            "meter",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("high", high)
        self._process_attr("low", low)
        self._process_attr("max", max)
        self._process_attr("min", min)
        self._process_attr("optimum", optimum)
        self._process_attr("value", value)


class nav(BaseElement, GlobalAttrs):
    """
    The <nav> element.
    Description: Section with navigational links
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <nav> element.
        Description: Section with navigational links
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "nav",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class noscript(BaseElement, GlobalAttrs):
    """
    The <noscript> element.
    Description: Fallback content for script
    Categories: metadata flow phrasing
    Parents: head* phrasing*
    Children: varies*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <noscript> element.
        Description: Fallback content for script
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "noscript",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class object(BaseElement, GlobalAttrs, ObjectAttrs):
    """
    The <object> element.
    Description: Image, child navigable, or plugin
    Categories: flow phrasing embedded interactive* listed form-associated palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLObjectElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        data: Union[str, ObjectAttrs.data] = None,
        form: Union[str, ObjectAttrs.form] = None,
        height: Union[str, ObjectAttrs.height] = None,
        name: Union[str, ObjectAttrs.name] = None,
        type: Union[str, ObjectAttrs.type] = None,
        width: Union[str, ObjectAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <object> element.
        Description: Image, child navigable, or plugin
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param data: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param form: Associates the element with a form element
            | ID*
        :param height: Vertical dimension
            | Valid non-negative integer
        :param name: Name of content navigable
            | Valid navigable target name or keyword
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "object",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("data", data)
        self._process_attr("form", form)
        self._process_attr("height", height)
        self._process_attr("name", name)
        self._process_attr("type", type)
        self._process_attr("width", width)


class ol(BaseElement, GlobalAttrs, OlAttrs):
    """
    The <ol> element.
    Description: Ordered list
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLOListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        reversed: Union[str, OlAttrs.reversed] = None,
        start: Union[str, OlAttrs.start] = None,
        type: Union[str, OlAttrs.type] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <ol> element.
        Description: Ordered list
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param reversed: Number the list backwards
            | Boolean attribute
        :param start: Starting value of the list
            | Valid integer
        :param type: Kind of list marker
            | ['1', 'a', 'A', 'i', 'I']
        """
        super().__init__(
            "ol",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("reversed", reversed)
        self._process_attr("start", start)
        self._process_attr("type", type)


class optgroup(BaseElement, GlobalAttrs, OptgroupAttrs):
    """
    The <optgroup> element.
    Description: Group of options in a list box
    Categories: none
    Parents: select
    Children: option script-supporting elements
    Interface: HTMLOptGroupElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: Union[str, OptgroupAttrs.disabled] = None,
        label: Union[str, OptgroupAttrs.label] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <optgroup> element.
        Description: Group of options in a list box
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param label: User-visible label
            | Text
        """
        super().__init__(
            "optgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("label", label)


class option(BaseElement, GlobalAttrs, OptionAttrs):
    """
    The <option> element.
    Description: Option in a list box or combo box control
    Categories: none
    Parents: select datalist optgroup
    Children: text*
    Interface: HTMLOptionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: Union[str, OptionAttrs.disabled] = None,
        label: Union[str, OptionAttrs.label] = None,
        selected: Union[str, OptionAttrs.selected] = None,
        value: Union[str, OptionAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <option> element.
        Description: Option in a list box or combo box control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param label: User-visible label
            | Text
        :param selected: Whether the option is selected by default
            | Boolean attribute
        :param value: Value to be used for form submission
            | Text
        """
        super().__init__(
            "option",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("label", label)
        self._process_attr("selected", selected)
        self._process_attr("value", value)


class output(BaseElement, GlobalAttrs, OutputAttrs):
    """
    The <output> element.
    Description: Calculated output value
    Categories: flow phrasing listed labelable resettable form-associated palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLOutputElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        for_: Union[str, OutputAttrs.for_] = None,
        form: Union[str, OutputAttrs.form] = None,
        name: Union[str, OutputAttrs.name] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <output> element.
        Description: Calculated output value
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param for_: Specifies controls from which the output was calculated
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param form: Associates the element with a form element
            | ID*
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        """
        super().__init__(
            "output",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("for", for_)
        self._process_attr("form", form)
        self._process_attr("name", name)


class p(BaseElement, GlobalAttrs):
    """
    The <p> element.
    Description: Paragraph
    Categories: flow palpable
    Parents: flow
    Children: phrasing
    Interface: HTMLParagraphElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <p> element.
        Description: Paragraph
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "p",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class picture(BaseElement, GlobalAttrs):
    """
    The <picture> element.
    Description: Image
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: source* one img script-supporting elements
    Interface: HTMLPictureElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <picture> element.
        Description: Image
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "picture",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class pre(BaseElement, GlobalAttrs):
    """
    The <pre> element.
    Description: Block of preformatted text
    Categories: flow palpable
    Parents: flow
    Children: phrasing
    Interface: HTMLPreElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <pre> element.
        Description: Block of preformatted text
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "pre",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class progress(BaseElement, GlobalAttrs, ProgressAttrs):
    """
    The <progress> element.
    Description: Progress bar
    Categories: flow phrasing labelable palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLProgressElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        max: Union[str, ProgressAttrs.max] = None,
        value: Union[str, ProgressAttrs.value] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <progress> element.
        Description: Progress bar
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param max: Upper bound of range
            | Valid floating-point number*
        :param value: Current value of the element
            | Valid floating-point number
        """
        super().__init__(
            "progress",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("max", max)
        self._process_attr("value", value)


class q(BaseElement, GlobalAttrs, QAttrs):
    """
    The <q> element.
    Description: Quotation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLQuoteElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: Union[str, QAttrs.cite] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <q> element.
        Description: Quotation
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param cite: Link to the source of the quotation or more information about the edit
            | Valid URL potentially surrounded by spaces
        """
        super().__init__(
            "q",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("cite", cite)


class rp(BaseElement, GlobalAttrs):
    """
    The <rp> element.
    Description: Parenthesis for ruby annotation text
    Categories: none
    Parents: ruby
    Children: text
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <rp> element.
        Description: Parenthesis for ruby annotation text
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "rp",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class rt(BaseElement, GlobalAttrs):
    """
    The <rt> element.
    Description: Ruby annotation text
    Categories: none
    Parents: ruby
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <rt> element.
        Description: Ruby annotation text
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "rt",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class ruby(BaseElement, GlobalAttrs):
    """
    The <ruby> element.
    Description: Ruby annotation(s)
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing rt rp*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <ruby> element.
        Description: Ruby annotation(s)
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "ruby",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class s(BaseElement, GlobalAttrs):
    """
    The <s> element.
    Description: Inaccurate text
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <s> element.
        Description: Inaccurate text
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "s",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class samp(BaseElement, GlobalAttrs):
    """
    The <samp> element.
    Description: Computer output
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <samp> element.
        Description: Computer output
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "samp",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class script(BaseElement, GlobalAttrs, ScriptAttrs):
    """
    The <script> element.
    Description: Embedded script
    Categories: metadata flow phrasing script-supporting
    Parents: head phrasing script-supporting
    Children: script, data, or script documentation*
    Interface: HTMLScriptElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        async_: Union[str, ScriptAttrs.async_] = None,
        blocking: Union[str, ScriptAttrs.blocking] = None,
        crossorigin: Union[str, ScriptAttrs.crossorigin] = None,
        defer: Union[str, ScriptAttrs.defer] = None,
        fetchpriority: Union[str, ScriptAttrs.fetchpriority] = None,
        integrity: Union[str, ScriptAttrs.integrity] = None,
        nomodule: Union[str, ScriptAttrs.nomodule] = None,
        referrerpolicy: Union[str, ScriptAttrs.referrerpolicy] = None,
        src: Union[str, ScriptAttrs.src] = None,
        type: Union[str, ScriptAttrs.type] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <script> element.
        Description: Embedded script
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param async_: Execute script when available, without blocking while fetching
            | Boolean attribute
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param crossorigin: How the element handles crossorigin requests
            | ['anonymous', 'use-credentials']
        :param defer: Defer script execution
            | Boolean attribute
        :param fetchpriority: Sets the priority for fetches initiated by the element
            | ['auto', 'high', 'low']
        :param integrity: Integrity metadata used in Subresource Integrity checks [SRI]
            | Text
        :param nomodule: Prevents execution in user agents that support module scripts
            | Boolean attribute
        :param referrerpolicy: Referrer policy for fetches initiated by the element
            | Referrer policy
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param type: Type of script
            | "module"; a valid MIME type string that is not a JavaScript MIME type essence match
        """
        super().__init__(
            "script",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("async", async_)
        self._process_attr("blocking", blocking)
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("defer", defer)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("integrity", integrity)
        self._process_attr("nomodule", nomodule)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("src", src)
        self._process_attr("type", type)


class search(BaseElement, GlobalAttrs):
    """
    The <search> element.
    Description: Container for search controls
    Categories: flow palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <search> element.
        Description: Container for search controls
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "search",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class section(BaseElement, GlobalAttrs):
    """
    The <section> element.
    Description: Generic document or application section
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <section> element.
        Description: Generic document or application section
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "section",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class select(BaseElement, GlobalAttrs, SelectAttrs):
    """
    The <select> element.
    Description: List box control
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable
    Parents: phrasing
    Children: option optgroup script-supporting elements
    Interface: HTMLSelectElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        autocomplete: Union[str, SelectAttrs.autocomplete] = None,
        disabled: Union[str, SelectAttrs.disabled] = None,
        form: Union[str, SelectAttrs.form] = None,
        multiple: Union[str, SelectAttrs.multiple] = None,
        name: Union[str, SelectAttrs.name] = None,
        required: Union[str, SelectAttrs.required] = None,
        size: Union[str, SelectAttrs.size] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <select> element.
        Description: List box control
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param form: Associates the element with a form element
            | ID*
        :param multiple: Whether to allow multiple values
            | Boolean attribute
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        :param required: Whether the control is required for form submission
            | Boolean attribute
        :param size: Size of the control
            | Valid non-negative integer greater than zero
        """
        super().__init__(
            "select",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)
        self._process_attr("multiple", multiple)
        self._process_attr("name", name)
        self._process_attr("required", required)
        self._process_attr("size", size)


class slot(BaseElement, GlobalAttrs, SlotAttrs):
    """
    The <slot> element.
    Description: Shadow tree slot
    Categories: flow phrasing
    Parents: phrasing
    Children: transparent
    Interface: HTMLSlotElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: Union[str, SlotAttrs.name] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <slot> element.
        Description: Shadow tree slot
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param name: Name of shadow tree slot
            | Text
        """
        super().__init__(
            "slot",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("name", name)


class small(BaseElement, GlobalAttrs):
    """
    The <small> element.
    Description: Side comment
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <small> element.
        Description: Side comment
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "small",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class source(BaseElement, GlobalAttrs, SourceAttrs):
    """
    The <source> element.
    Description: Image source for img or media source for video or audio
    Categories: none
    Parents: picture video audio
    Children: empty
    Interface: HTMLSourceElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: Union[str, SourceAttrs.height] = None,
        media: Union[str, SourceAttrs.media] = None,
        sizes: Union[str, SourceAttrs.sizes] = None,
        src: Union[str, SourceAttrs.src] = None,
        srcset: Union[str, SourceAttrs.srcset] = None,
        type: Union[str, SourceAttrs.type] = None,
        width: Union[str, SourceAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <source> element.
        Description: Image source for img or media source for video or audio
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param height: Vertical dimension
            | Valid non-negative integer
        :param media: Applicable media
            | Valid media query list
        :param sizes: Image sizes for different page layouts
            | Valid source size list
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srcset: Images to use in different situations, e.g., high-resolution displays, small monitors, etc.
            | Comma-separated list of image candidate strings
        :param type: Type of embedded resource
            | Valid MIME type string
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "source",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("height", height)
        self._process_attr("media", media)
        self._process_attr("sizes", sizes)
        self._process_attr("src", src)
        self._process_attr("srcset", srcset)
        self._process_attr("type", type)
        self._process_attr("width", width)


class span(BaseElement, GlobalAttrs):
    """
    The <span> element.
    Description: Generic phrasing container
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLSpanElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <span> element.
        Description: Generic phrasing container
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "span",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class strong(BaseElement, GlobalAttrs):
    """
    The <strong> element.
    Description: Importance
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <strong> element.
        Description: Importance
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "strong",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class style(BaseElement, GlobalAttrs, StyleAttrs):
    """
    The <style> element.
    Description: Embedded styling information
    Categories: metadata
    Parents: head noscript*
    Children: text*
    Interface: HTMLStyleElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        blocking: Union[str, StyleAttrs.blocking] = None,
        media: Union[str, StyleAttrs.media] = None,
        title: Union[str, StyleAttrs.title] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <style> element.
        Description: Embedded styling information
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param blocking: Whether the element is potentially render-blocking
            | Unordered set of unique space-separated tokens*
        :param media: Applicable media
            | Valid media query list
        :param title: CSS style sheet set name
            | Text
        """
        super().__init__(
            "style",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("blocking", blocking)
        self._process_attr("media", media)
        self._process_attr("title", title)


class sub(BaseElement, GlobalAttrs):
    """
    The <sub> element.
    Description: Subscript
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <sub> element.
        Description: Subscript
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "sub",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class summary(BaseElement, GlobalAttrs):
    """
    The <summary> element.
    Description: Caption for details
    Categories: none
    Parents: details
    Children: phrasing heading content
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <summary> element.
        Description: Caption for details
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "summary",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class sup(BaseElement, GlobalAttrs):
    """
    The <sup> element.
    Description: Superscript
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <sup> element.
        Description: Superscript
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "sup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class svg(BaseElement, GlobalAttrs):
    """
    The <svg> element.
    Description: SVG root
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: per [SVG]
    Interface: SVGSVGElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <svg> element.
        Description: SVG root
        Documentation: None

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "svg",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class table(BaseElement, GlobalAttrs):
    """
    The <table> element.
    Description: Table
    Categories: flow palpable
    Parents: flow
    Children: caption* colgroup* thead* tbody* tfoot* tr* script-supporting elements
    Interface: HTMLTableElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <table> element.
        Description: Table
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "table",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class tbody(BaseElement, GlobalAttrs):
    """
    The <tbody> element.
    Description: Group of rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <tbody> element.
        Description: Group of rows in a table
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "tbody",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class td(BaseElement, GlobalAttrs, TdAttrs):
    """
    The <td> element.
    Description: Table cell
    Categories: none
    Parents: tr
    Children: flow
    Interface: HTMLTableCellElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        colspan: Union[str, TdAttrs.colspan] = None,
        headers: Union[str, TdAttrs.headers] = None,
        rowspan: Union[str, TdAttrs.rowspan] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <td> element.
        Description: Table cell
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param colspan: Number of columns that the cell is to span
            | Valid non-negative integer greater than zero
        :param headers: The header cells for this cell
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param rowspan: Number of rows that the cell is to span
            | Valid non-negative integer
        """
        super().__init__(
            "td",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("colspan", colspan)
        self._process_attr("headers", headers)
        self._process_attr("rowspan", rowspan)


class template(BaseElement, GlobalAttrs, TemplateAttrs):
    """
    The <template> element.
    Description: Template
    Categories: metadata flow phrasing script-supporting
    Parents: metadata phrasing script-supporting colgroup*
    Children: empty
    Interface: HTMLTemplateElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        shadowrootclonable: Union[str, TemplateAttrs.shadowrootclonable] = None,
        shadowrootdelegatesfocus: Union[
            str, TemplateAttrs.shadowrootdelegatesfocus
        ] = None,
        shadowrootmode: Union[str, TemplateAttrs.shadowrootmode] = None,
        shadowrootserializable: Union[
            str, TemplateAttrs.shadowrootserializable
        ] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <template> element.
        Description: Template
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param shadowrootclonable: Sets clonable on a declarative shadow root
            | Boolean attribute
        :param shadowrootdelegatesfocus: Sets delegates focus on a declarative shadow root
            | Boolean attribute
        :param shadowrootmode: Enables streaming declarative shadow roots
            | ['open', 'closed']
        :param shadowrootserializable: Sets serializable on a declarative shadow root
            | Boolean attribute
        """
        super().__init__(
            "template",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("shadowrootclonable", shadowrootclonable)
        self._process_attr("shadowrootdelegatesfocus", shadowrootdelegatesfocus)
        self._process_attr("shadowrootmode", shadowrootmode)
        self._process_attr("shadowrootserializable", shadowrootserializable)


class textarea(BaseElement, GlobalAttrs, TextareaAttrs):
    """
    The <textarea> element.
    Description: Multiline text controls
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable
    Parents: phrasing
    Children: text
    Interface: HTMLTextAreaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        autocomplete: Union[str, TextareaAttrs.autocomplete] = None,
        cols: Union[str, TextareaAttrs.cols] = None,
        dirname: Union[str, TextareaAttrs.dirname] = None,
        disabled: Union[str, TextareaAttrs.disabled] = None,
        form: Union[str, TextareaAttrs.form] = None,
        maxlength: Union[str, TextareaAttrs.maxlength] = None,
        minlength: Union[str, TextareaAttrs.minlength] = None,
        name: Union[str, TextareaAttrs.name] = None,
        placeholder: Union[str, TextareaAttrs.placeholder] = None,
        readonly: Union[str, TextareaAttrs.readonly] = None,
        required: Union[str, TextareaAttrs.required] = None,
        rows: Union[str, TextareaAttrs.rows] = None,
        wrap: Union[str, TextareaAttrs.wrap] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <textarea> element.
        Description: Multiline text controls
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param autocomplete: Hint for form autofill feature
            | Autofill field name and related tokens*
        :param cols: Maximum number of characters per line
            | Valid non-negative integer greater than zero
        :param dirname: Name of form control to use for sending the element's directionality in form submission
            | Text*
        :param disabled: Whether the form control is disabled
            | Boolean attribute
        :param form: Associates the element with a form element
            | ID*
        :param maxlength: Maximum length of value
            | Valid non-negative integer
        :param minlength: Minimum length of value
            | Valid non-negative integer
        :param name: Name of the element to use for form submission and in the form.elements API
            | Text*
        :param placeholder: User-visible label to be placed within the form control
            | Text*
        :param readonly: Whether to allow the value to be edited by the user
            | Boolean attribute
        :param required: Whether the control is required for form submission
            | Boolean attribute
        :param rows: Number of lines to show
            | Valid non-negative integer greater than zero
        :param wrap: How the value of the form control is to be wrapped for form submission
            | ['soft', 'hard']
        """
        super().__init__(
            "textarea",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("cols", cols)
        self._process_attr("dirname", dirname)
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)
        self._process_attr("maxlength", maxlength)
        self._process_attr("minlength", minlength)
        self._process_attr("name", name)
        self._process_attr("placeholder", placeholder)
        self._process_attr("readonly", readonly)
        self._process_attr("required", required)
        self._process_attr("rows", rows)
        self._process_attr("wrap", wrap)


class tfoot(BaseElement, GlobalAttrs):
    """
    The <tfoot> element.
    Description: Group of footer rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <tfoot> element.
        Description: Group of footer rows in a table
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "tfoot",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class th(BaseElement, GlobalAttrs, ThAttrs):
    """
    The <th> element.
    Description: Table header cell
    Categories: interactive*
    Parents: tr
    Children: flow*
    Interface: HTMLTableCellElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        abbr: Union[str, ThAttrs.abbr] = None,
        colspan: Union[str, ThAttrs.colspan] = None,
        headers: Union[str, ThAttrs.headers] = None,
        rowspan: Union[str, ThAttrs.rowspan] = None,
        scope: Union[str, ThAttrs.scope] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <th> element.
        Description: Table header cell
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param abbr: Alternative label to use for the header cell when referencing the cell in other contexts
            | Text*
        :param colspan: Number of columns that the cell is to span
            | Valid non-negative integer greater than zero
        :param headers: The header cells for this cell
            | Unordered set of unique space-separated tokens consisting of IDs*
        :param rowspan: Number of rows that the cell is to span
            | Valid non-negative integer
        :param scope: Specifies which cells the header cell applies to
            | ['row', 'col', 'rowgroup', 'colgroup']
        """
        super().__init__(
            "th",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("abbr", abbr)
        self._process_attr("colspan", colspan)
        self._process_attr("headers", headers)
        self._process_attr("rowspan", rowspan)
        self._process_attr("scope", scope)


class thead(BaseElement, GlobalAttrs):
    """
    The <thead> element.
    Description: Group of heading rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <thead> element.
        Description: Group of heading rows in a table
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "thead",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class time(BaseElement, GlobalAttrs, TimeAttrs):
    """
    The <time> element.
    Description: Machine-readable equivalent of date- or time-related data
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLTimeElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        datetime: Union[str, TimeAttrs.datetime] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <time> element.
        Description: Machine-readable equivalent of date- or time-related data
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param datetime: Machine-readable value
            | Valid month string, valid date string, valid yearless date string, valid time string, valid local date and time string, valid time-zone offset string, valid global date and time string, valid week string, valid non-negative integer, or valid duration string
        """
        super().__init__(
            "time",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("datetime", datetime)


class title(BaseElement, GlobalAttrs):
    """
    The <title> element.
    Description: Document title
    Categories: metadata
    Parents: head
    Children: text*
    Interface: HTMLTitleElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <title> element.
        Description: Document title
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "title",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class tr(BaseElement, GlobalAttrs):
    """
    The <tr> element.
    Description: Table row
    Categories: none
    Parents: table thead tbody tfoot
    Children: th* td script-supporting elements
    Interface: HTMLTableRowElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <tr> element.
        Description: Table row
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "tr",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class track(BaseElement, GlobalAttrs, TrackAttrs):
    """
    The <track> element.
    Description: Timed text track
    Categories: none
    Parents: audio video
    Children: empty
    Interface: HTMLTrackElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        default: Union[str, TrackAttrs.default] = None,
        kind: Union[str, TrackAttrs.kind] = None,
        label: Union[str, TrackAttrs.label] = None,
        src: Union[str, TrackAttrs.src] = None,
        srclang: Union[str, TrackAttrs.srclang] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <track> element.
        Description: Timed text track
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param default: Enable the track if no other text track is more suitable
            | Boolean attribute
        :param kind: The type of text track
            | ['subtitles', 'captions', 'descriptions', 'chapters', 'metadata']
        :param label: User-visible label
            | Text
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param srclang: Language of the text track
            | Valid BCP 47 language tag
        """
        super().__init__(
            "track",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("default", default)
        self._process_attr("kind", kind)
        self._process_attr("label", label)
        self._process_attr("src", src)
        self._process_attr("srclang", srclang)


class u(BaseElement, GlobalAttrs):
    """
    The <u> element.
    Description: Unarticulated annotation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <u> element.
        Description: Unarticulated annotation
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "u",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class ul(BaseElement, GlobalAttrs):
    """
    The <ul> element.
    Description: List
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLUListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <ul> element.
        Description: List
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "ul",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class var(BaseElement, GlobalAttrs):
    """
    The <var> element.
    Description: Variable
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <var> element.
        Description: Variable
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "var",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )


class video(BaseElement, GlobalAttrs, VideoAttrs):
    """
    The <video> element.
    Description: Video player
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: source* track* transparent*
    Interface: HTMLVideoElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        autoplay: Union[str, VideoAttrs.autoplay] = None,
        controls: Union[str, VideoAttrs.controls] = None,
        crossorigin: Union[str, VideoAttrs.crossorigin] = None,
        height: Union[str, VideoAttrs.height] = None,
        loop: Union[str, VideoAttrs.loop] = None,
        muted: Union[str, VideoAttrs.muted] = None,
        playsinline: Union[str, VideoAttrs.playsinline] = None,
        poster: Union[str, VideoAttrs.poster] = None,
        preload: Union[str, VideoAttrs.preload] = None,
        src: Union[str, VideoAttrs.src] = None,
        width: Union[str, VideoAttrs.width] = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <video> element.
        Description: Video player
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        :param autoplay: Hint that the media resource can be started automatically when the page is loaded
            | Boolean attribute
        :param controls: Show user agent controls
            | Boolean attribute
        :param crossorigin: How the element handles crossorigin requests
            | ['anonymous', 'use-credentials']
        :param height: Vertical dimension
            | Valid non-negative integer
        :param loop: Whether to loop the media resource
            | Boolean attribute
        :param muted: Whether to mute the media resource by default
            | Boolean attribute
        :param playsinline: Encourage the user agent to display video content within the element's playback area
            | Boolean attribute
        :param poster: Poster frame to show prior to video playback
            | Valid non-empty URL potentially surrounded by spaces
        :param preload: Hints how much buffering the media resource will likely need
            | ['none', 'metadata', 'auto']
        :param src: Address of the resource
            | Valid non-empty URL potentially surrounded by spaces
        :param width: Horizontal dimension
            | Valid non-negative integer
        """
        super().__init__(
            "video",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
        self._process_attr("autoplay", autoplay)
        self._process_attr("controls", controls)
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("height", height)
        self._process_attr("loop", loop)
        self._process_attr("muted", muted)
        self._process_attr("playsinline", playsinline)
        self._process_attr("poster", poster)
        self._process_attr("preload", preload)
        self._process_attr("src", src)
        self._process_attr("width", width)


class wbr(BaseElement, GlobalAttrs):
    """
    The <wbr> element.
    Description: Line breaking opportunity
    Categories: flow phrasing
    Parents: phrasing
    Children: empty
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        """
        Initialize a <wbr> element.
        Description: Line breaking opportunity
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr

        :param id: The ID of the element
        :param class_ The class of the element
        :param attrs: A list or dictionary of attributes for the element
        """
        super().__init__(
            "wbr",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
            children=children,
        )
