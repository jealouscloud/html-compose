from typing import TypeAlias, Union

from .attributes import (
    AnchorAttrs,
    AreaAttrs,
    AudioAttrs,
    BaseAttrs,
    BlockquoteAttrs,
    BodyAttrs,
    ButtonAttrs,
    CanvasAttrs,
    ColAttrs,
    ColgroupAttrs,
    DataAttrs,
    DelAttrs,
    DetailsAttrs,
    DialogAttrs,
    EmbedAttrs,
    FieldsetAttrs,
    FormAttrs,
    GlobalAttrs,
    IframeAttrs,
    ImgAttrs,
    InputAttrs,
    InsAttrs,
    LabelAttrs,
    LiAttrs,
    LinkAttrs,
    MapAttrs,
    MetaAttrs,
    MeterAttrs,
    ObjectAttrs,
    OlAttrs,
    OptgroupAttrs,
    OptionAttrs,
    OutputAttrs,
    ProgressAttrs,
    QAttrs,
    ScriptAttrs,
    SelectAttrs,
    SlotAttrs,
    SourceAttrs,
    StyleAttrs,
    TdAttrs,
    TemplateAttrs,
    TextareaAttrs,
    ThAttrs,
    TimeAttrs,
    TrackAttrs,
    VideoAttrs,
)
from .base_attribute import BaseAttribute
from .base_element import BaseElement

# This file is generated by tools/generate_elements.py


class a(BaseElement, GlobalAttrs, AnchorAttrs):
    """
    The <a> element.
    Description: Hyperlink
    Categories: flow phrasing* interactive palpable
    Parents: phrasing
    Children: transparent*
    Interface: HTMLAnchorElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        rel: AnchorAttrs.rel = None,
        download: AnchorAttrs.download = None,
        referrerpolicy: AnchorAttrs.referrerpolicy = None,
        target: AnchorAttrs.target = None,
        ping: AnchorAttrs.ping = None,
        href: AnchorAttrs.href = None,
        type: AnchorAttrs.type = None,
        hreflang: AnchorAttrs.hreflang = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "a",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("rel", rel)
        self._process_attr("download", download)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("target", target)
        self._process_attr("ping", ping)
        self._process_attr("href", href)
        self._process_attr("type", type)
        self._process_attr("hreflang", hreflang)


class abbr(BaseElement, GlobalAttrs):
    """
    The <abbr> element.
    Description: Abbreviation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "abbr",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class address(BaseElement, GlobalAttrs):
    """
    The <address> element.
    Description: Contact information for a page or article element
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "address",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class area(BaseElement, GlobalAttrs, AreaAttrs):
    """
    The <area> element.
    Description: Hyperlink or dead area on an image map
    Categories: flow phrasing
    Parents: phrasing*
    Children: empty
    Interface: HTMLAreaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        alt: AreaAttrs.alt = None,
        download: AreaAttrs.download = None,
        referrerpolicy: AreaAttrs.referrerpolicy = None,
        target: AreaAttrs.target = None,
        ping: AreaAttrs.ping = None,
        coords: AreaAttrs.coords = None,
        shape: AreaAttrs.shape = None,
        rel: AreaAttrs.rel = None,
        href: AreaAttrs.href = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "area",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("alt", alt)
        self._process_attr("download", download)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("target", target)
        self._process_attr("ping", ping)
        self._process_attr("coords", coords)
        self._process_attr("shape", shape)
        self._process_attr("rel", rel)
        self._process_attr("href", href)


class article(BaseElement, GlobalAttrs):
    """
    The <article> element.
    Description: Self-contained syndicatable or reusable composition
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "article",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class aside(BaseElement, GlobalAttrs):
    """
    The <aside> element.
    Description: Sidebar for tangentially related content
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "aside",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class audio(BaseElement, GlobalAttrs, AudioAttrs):
    """
    The <audio> element.
    Description: Audio player
    Categories: flow phrasing embedded interactive palpable*
    Parents: phrasing
    Children: source* track* transparent*
    Interface: HTMLAudioElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        crossorigin: AudioAttrs.crossorigin = None,
        controls: AudioAttrs.controls = None,
        src: AudioAttrs.src = None,
        loop: AudioAttrs.loop = None,
        muted: AudioAttrs.muted = None,
        preload: AudioAttrs.preload = None,
        autoplay: AudioAttrs.autoplay = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "audio",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("controls", controls)
        self._process_attr("src", src)
        self._process_attr("loop", loop)
        self._process_attr("muted", muted)
        self._process_attr("preload", preload)
        self._process_attr("autoplay", autoplay)


class b(BaseElement, GlobalAttrs):
    """
    The <b> element.
    Description: Keywords
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "b",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class base(BaseElement, GlobalAttrs, BaseAttrs):
    """
    The <base> element.
    Description: Base URL and default target navigable for hyperlinks and forms
    Categories: metadata
    Parents: head
    Children: empty
    Interface: HTMLBaseElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        target: BaseAttrs.target = None,
        href: BaseAttrs.href = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "base",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("target", target)
        self._process_attr("href", href)


class bdi(BaseElement, GlobalAttrs):
    """
    The <bdi> element.
    Description: Text directionality isolation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "bdi",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class bdo(BaseElement, GlobalAttrs):
    """
    The <bdo> element.
    Description: Text directionality formatting
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "bdo",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class blockquote(BaseElement, GlobalAttrs, BlockquoteAttrs):
    """
    The <blockquote> element.
    Description: A section quoted from another source
    Categories: flow palpable
    Parents: flow
    Children: flow
    Interface: HTMLQuoteElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: BlockquoteAttrs.cite = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "blockquote",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("cite", cite)


class body(BaseElement, GlobalAttrs, BodyAttrs):
    """
    The <body> element.
    Description: Document body
    Categories: none
    Parents: html
    Children: flow
    Interface: HTMLBodyElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        onpageshow: BodyAttrs.onpageshow = None,
        onafterprint: BodyAttrs.onafterprint = None,
        onbeforeunload: BodyAttrs.onbeforeunload = None,
        onpopstate: BodyAttrs.onpopstate = None,
        onrejectionhandled: BodyAttrs.onrejectionhandled = None,
        onmessage: BodyAttrs.onmessage = None,
        onhashchange: BodyAttrs.onhashchange = None,
        onmessageerror: BodyAttrs.onmessageerror = None,
        ononline: BodyAttrs.ononline = None,
        onlanguagechange: BodyAttrs.onlanguagechange = None,
        onoffline: BodyAttrs.onoffline = None,
        onpagehide: BodyAttrs.onpagehide = None,
        onstorage: BodyAttrs.onstorage = None,
        onpagereveal: BodyAttrs.onpagereveal = None,
        onbeforeprint: BodyAttrs.onbeforeprint = None,
        onpageswap: BodyAttrs.onpageswap = None,
        onunload: BodyAttrs.onunload = None,
        onunhandledrejection: BodyAttrs.onunhandledrejection = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "body",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("onpageshow", onpageshow)
        self._process_attr("onafterprint", onafterprint)
        self._process_attr("onbeforeunload", onbeforeunload)
        self._process_attr("onpopstate", onpopstate)
        self._process_attr("onrejectionhandled", onrejectionhandled)
        self._process_attr("onmessage", onmessage)
        self._process_attr("onhashchange", onhashchange)
        self._process_attr("onmessageerror", onmessageerror)
        self._process_attr("ononline", ononline)
        self._process_attr("onlanguagechange", onlanguagechange)
        self._process_attr("onoffline", onoffline)
        self._process_attr("onpagehide", onpagehide)
        self._process_attr("onstorage", onstorage)
        self._process_attr("onpagereveal", onpagereveal)
        self._process_attr("onbeforeprint", onbeforeprint)
        self._process_attr("onpageswap", onpageswap)
        self._process_attr("onunload", onunload)
        self._process_attr("onunhandledrejection", onunhandledrejection)


class br(BaseElement, GlobalAttrs):
    """
    The <br> element.
    Description: Line break, e.g. in poem or postal address
    Categories: flow phrasing
    Parents: phrasing
    Children: empty
    Interface: HTMLBRElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "br",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class button(BaseElement, GlobalAttrs, ButtonAttrs):
    """
    The <button> element.
    Description: Button control
    Categories: flow phrasing interactive listed labelable submittable form-associated palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLButtonElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        formnovalidate: ButtonAttrs.formnovalidate = None,
        disabled: ButtonAttrs.disabled = None,
        formaction: ButtonAttrs.formaction = None,
        value: ButtonAttrs.value = None,
        formenctype: ButtonAttrs.formenctype = None,
        popovertarget: ButtonAttrs.popovertarget = None,
        formmethod: ButtonAttrs.formmethod = None,
        name: ButtonAttrs.name = None,
        formtarget: ButtonAttrs.formtarget = None,
        popovertargetaction: ButtonAttrs.popovertargetaction = None,
        type: ButtonAttrs.type = None,
        form: ButtonAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "button",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("formnovalidate", formnovalidate)
        self._process_attr("disabled", disabled)
        self._process_attr("formaction", formaction)
        self._process_attr("value", value)
        self._process_attr("formenctype", formenctype)
        self._process_attr("popovertarget", popovertarget)
        self._process_attr("formmethod", formmethod)
        self._process_attr("name", name)
        self._process_attr("formtarget", formtarget)
        self._process_attr("popovertargetaction", popovertargetaction)
        self._process_attr("type", type)
        self._process_attr("form", form)


class canvas(BaseElement, GlobalAttrs, CanvasAttrs):
    """
    The <canvas> element.
    Description: Scriptable bitmap canvas
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLCanvasElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: CanvasAttrs.height = None,
        width: CanvasAttrs.width = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "canvas",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("height", height)
        self._process_attr("width", width)


class caption(BaseElement, GlobalAttrs):
    """
    The <caption> element.
    Description: Table caption
    Categories: none
    Parents: table
    Children: flow*
    Interface: HTMLTableCaptionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "caption",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class cite(BaseElement, GlobalAttrs):
    """
    The <cite> element.
    Description: Title of a work
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "cite",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class code(BaseElement, GlobalAttrs):
    """
    The <code> element.
    Description: Computer code
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "code",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class col(BaseElement, GlobalAttrs, ColAttrs):
    """
    The <col> element.
    Description: Table column
    Categories: none
    Parents: colgroup
    Children: empty
    Interface: HTMLTableColElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        span: ColAttrs.span = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "col",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("span", span)


class colgroup(BaseElement, GlobalAttrs, ColgroupAttrs):
    """
    The <colgroup> element.
    Description: Group of columns in a table
    Categories: none
    Parents: table
    Children: col* template*
    Interface: HTMLTableColElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        span: ColgroupAttrs.span = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "colgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("span", span)


class data(BaseElement, GlobalAttrs, DataAttrs):
    """
    The <data> element.
    Description: Machine-readable equivalent
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLDataElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        value: DataAttrs.value = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "data",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("value", value)


class datalist(BaseElement, GlobalAttrs):
    """
    The <datalist> element.
    Description: Container for options for combo box control
    Categories: flow phrasing
    Parents: phrasing
    Children: phrasing* option* script-supporting elements*
    Interface: HTMLDataListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "datalist",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class dd(BaseElement, GlobalAttrs):
    """
    The <dd> element.
    Description: Content for corresponding dt element(s)
    Categories: none
    Parents: dl div*
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "dd",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class del_(BaseElement, GlobalAttrs, DelAttrs):
    """
    The <del> element.
    Description: A removal from the document
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLModElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: DelAttrs.cite = None,
        datetime: DelAttrs.datetime = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "del",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("cite", cite)
        self._process_attr("datetime", datetime)


class details(BaseElement, GlobalAttrs, DetailsAttrs):
    """
    The <details> element.
    Description: Disclosure control for hiding details
    Categories: flow interactive palpable
    Parents: flow
    Children: summary* flow
    Interface: HTMLDetailsElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: DetailsAttrs.name = None,
        open: DetailsAttrs.open = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "details",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("name", name)
        self._process_attr("open", open)


class dfn(BaseElement, GlobalAttrs):
    """
    The <dfn> element.
    Description: Defining instance
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "dfn",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class dialog(BaseElement, GlobalAttrs, DialogAttrs):
    """
    The <dialog> element.
    Description: Dialog box or window
    Categories: flow
    Parents: flow
    Children: flow
    Interface: HTMLDialogElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        open: DialogAttrs.open = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "dialog",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("open", open)


class div(BaseElement, GlobalAttrs):
    """
    The <div> element.
    Description: Generic flow container, or container for name-value groups in dl elements
    Categories: flow palpable
    Parents: flow dl
    Children: flow
    Interface: HTMLDivElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "div",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class dl(BaseElement, GlobalAttrs):
    """
    The <dl> element.
    Description: Association list consisting of zero or more name-value groups
    Categories: flow palpable
    Parents: flow
    Children: dt* dd* div* script-supporting elements
    Interface: HTMLDListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "dl",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class dt(BaseElement, GlobalAttrs):
    """
    The <dt> element.
    Description: Legend for corresponding dd element(s)
    Categories: none
    Parents: dl div*
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "dt",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class em(BaseElement, GlobalAttrs):
    """
    The <em> element.
    Description: Stress emphasis
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "em",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class embed(BaseElement, GlobalAttrs, EmbedAttrs):
    """
    The <embed> element.
    Description: Plugin
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: empty
    Interface: HTMLEmbedElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        src: EmbedAttrs.src = None,
        type: EmbedAttrs.type = None,
        height: EmbedAttrs.height = None,
        width: EmbedAttrs.width = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "embed",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("src", src)
        self._process_attr("type", type)
        self._process_attr("height", height)
        self._process_attr("width", width)


class fieldset(BaseElement, GlobalAttrs, FieldsetAttrs):
    """
    The <fieldset> element.
    Description: Group of form controls
    Categories: flow listed form-associated palpable
    Parents: flow
    Children: legend* flow
    Interface: HTMLFieldSetElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: FieldsetAttrs.name = None,
        disabled: FieldsetAttrs.disabled = None,
        form: FieldsetAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "fieldset",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("name", name)
        self._process_attr("disabled", disabled)
        self._process_attr("form", form)


class figcaption(BaseElement, GlobalAttrs):
    """
    The <figcaption> element.
    Description: Caption for figure
    Categories: none
    Parents: figure
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "figcaption",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class figure(BaseElement, GlobalAttrs):
    """
    The <figure> element.
    Description: Figure with optional caption
    Categories: flow palpable
    Parents: flow
    Children: figcaption* flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "figure",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class footer(BaseElement, GlobalAttrs):
    """
    The <footer> element.
    Description: Footer for a page or section
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "footer",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class form(BaseElement, GlobalAttrs, FormAttrs):
    """
    The <form> element.
    Description: User-submittable form
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLFormElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        accept_charset: FormAttrs.accept_charset = None,
        action: FormAttrs.action = None,
        novalidate: FormAttrs.novalidate = None,
        target: FormAttrs.target = None,
        enctype: FormAttrs.enctype = None,
        name: FormAttrs.name = None,
        method: FormAttrs.method = None,
        autocomplete: FormAttrs.autocomplete = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "form",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("accept-charset", accept_charset)
        self._process_attr("action", action)
        self._process_attr("novalidate", novalidate)
        self._process_attr("target", target)
        self._process_attr("enctype", enctype)
        self._process_attr("name", name)
        self._process_attr("method", method)
        self._process_attr("autocomplete", autocomplete)


class h1(BaseElement, GlobalAttrs):
    """
    The <h1> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h1",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class h2(BaseElement, GlobalAttrs):
    """
    The <h2> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h2",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class h3(BaseElement, GlobalAttrs):
    """
    The <h3> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h3",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class h4(BaseElement, GlobalAttrs):
    """
    The <h4> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h4",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class h5(BaseElement, GlobalAttrs):
    """
    The <h5> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h5",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class h6(BaseElement, GlobalAttrs):
    """
    The <h6> element.
    Description: Heading
    Categories: flow heading palpable
    Parents: legend summary flow
    Children: phrasing
    Interface: HTMLHeadingElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "h6",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class head(BaseElement, GlobalAttrs):
    """
    The <head> element.
    Description: Container for document metadata
    Categories: none
    Parents: html
    Children: metadata content*
    Interface: HTMLHeadElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "head",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class header(BaseElement, GlobalAttrs):
    """
    The <header> element.
    Description: Introductory or navigational aids for a page or section
    Categories: flow palpable
    Parents: flow
    Children: flow*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "header",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class hgroup(BaseElement, GlobalAttrs):
    """
    The <hgroup> element.
    Description: Heading container
    Categories: flow palpable
    Parents: legend summary flow
    Children: h1 h2 h3 h4 h5 h6 script-supporting elements
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "hgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class hr(BaseElement, GlobalAttrs):
    """
    The <hr> element.
    Description: Thematic break
    Categories: flow
    Parents: flow
    Children: empty
    Interface: HTMLHRElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "hr",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class html(BaseElement, GlobalAttrs):
    """
    The <html> element.
    Description: Root element
    Categories: none
    Parents: none*
    Children: head* body*
    Interface: HTMLHtmlElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "html",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class i(BaseElement, GlobalAttrs):
    """
    The <i> element.
    Description: Alternate voice
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "i",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class iframe(BaseElement, GlobalAttrs, IframeAttrs):
    """
    The <iframe> element.
    Description: Child navigable
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: empty
    Interface: HTMLIFrameElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: IframeAttrs.height = None,
        width: IframeAttrs.width = None,
        src: IframeAttrs.src = None,
        srcdoc: IframeAttrs.srcdoc = None,
        referrerpolicy: IframeAttrs.referrerpolicy = None,
        allow: IframeAttrs.allow = None,
        name: IframeAttrs.name = None,
        allowfullscreen: IframeAttrs.allowfullscreen = None,
        sandbox: IframeAttrs.sandbox = None,
        loading: IframeAttrs.loading = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "iframe",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("height", height)
        self._process_attr("width", width)
        self._process_attr("src", src)
        self._process_attr("srcdoc", srcdoc)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("allow", allow)
        self._process_attr("name", name)
        self._process_attr("allowfullscreen", allowfullscreen)
        self._process_attr("sandbox", sandbox)
        self._process_attr("loading", loading)


class img(BaseElement, GlobalAttrs, ImgAttrs):
    """
    The <img> element.
    Description: Image
    Categories: flow phrasing embedded interactive* form-associated palpable
    Parents: phrasing picture
    Children: empty
    Interface: HTMLImageElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        crossorigin: ImgAttrs.crossorigin = None,
        alt: ImgAttrs.alt = None,
        height: ImgAttrs.height = None,
        width: ImgAttrs.width = None,
        ismap: ImgAttrs.ismap = None,
        src: ImgAttrs.src = None,
        referrerpolicy: ImgAttrs.referrerpolicy = None,
        usemap: ImgAttrs.usemap = None,
        fetchpriority: ImgAttrs.fetchpriority = None,
        loading: ImgAttrs.loading = None,
        srcset: ImgAttrs.srcset = None,
        sizes: ImgAttrs.sizes = None,
        decoding: ImgAttrs.decoding = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "img",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("alt", alt)
        self._process_attr("height", height)
        self._process_attr("width", width)
        self._process_attr("ismap", ismap)
        self._process_attr("src", src)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("usemap", usemap)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("loading", loading)
        self._process_attr("srcset", srcset)
        self._process_attr("sizes", sizes)
        self._process_attr("decoding", decoding)


class input(BaseElement, GlobalAttrs, InputAttrs):
    """
    The <input> element.
    Description: Form control
    Categories: flow phrasing interactive* listed labelable submittable resettable form-associated palpable*
    Parents: phrasing
    Children: empty
    Interface: HTMLInputElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        required: InputAttrs.required = None,
        popovertarget: InputAttrs.popovertarget = None,
        formmethod: InputAttrs.formmethod = None,
        pattern: InputAttrs.pattern = None,
        accept: InputAttrs.accept = None,
        popovertargetaction: InputAttrs.popovertargetaction = None,
        step: InputAttrs.step = None,
        disabled: InputAttrs.disabled = None,
        height: InputAttrs.height = None,
        width: InputAttrs.width = None,
        size: InputAttrs.size = None,
        minlength: InputAttrs.minlength = None,
        alpha: InputAttrs.alpha = None,
        formtarget: InputAttrs.formtarget = None,
        maxlength: InputAttrs.maxlength = None,
        formnovalidate: InputAttrs.formnovalidate = None,
        alt: InputAttrs.alt = None,
        formaction: InputAttrs.formaction = None,
        dirname: InputAttrs.dirname = None,
        title: InputAttrs.title = None,
        formenctype: InputAttrs.formenctype = None,
        src: InputAttrs.src = None,
        multiple: InputAttrs.multiple = None,
        min: InputAttrs.min = None,
        readonly: InputAttrs.readonly = None,
        checked: InputAttrs.checked = None,
        max: InputAttrs.max = None,
        colorspace: InputAttrs.colorspace = None,
        form: InputAttrs.form = None,
        value: InputAttrs.value = None,
        name: InputAttrs.name = None,
        autocomplete: InputAttrs.autocomplete = None,
        placeholder: InputAttrs.placeholder = None,
        list: InputAttrs.list = None,
        type: InputAttrs.type = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "input",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("required", required)
        self._process_attr("popovertarget", popovertarget)
        self._process_attr("formmethod", formmethod)
        self._process_attr("pattern", pattern)
        self._process_attr("accept", accept)
        self._process_attr("popovertargetaction", popovertargetaction)
        self._process_attr("step", step)
        self._process_attr("disabled", disabled)
        self._process_attr("height", height)
        self._process_attr("width", width)
        self._process_attr("size", size)
        self._process_attr("minlength", minlength)
        self._process_attr("alpha", alpha)
        self._process_attr("formtarget", formtarget)
        self._process_attr("maxlength", maxlength)
        self._process_attr("formnovalidate", formnovalidate)
        self._process_attr("alt", alt)
        self._process_attr("formaction", formaction)
        self._process_attr("dirname", dirname)
        self._process_attr("title", title)
        self._process_attr("formenctype", formenctype)
        self._process_attr("src", src)
        self._process_attr("multiple", multiple)
        self._process_attr("min", min)
        self._process_attr("readonly", readonly)
        self._process_attr("checked", checked)
        self._process_attr("max", max)
        self._process_attr("colorspace", colorspace)
        self._process_attr("form", form)
        self._process_attr("value", value)
        self._process_attr("name", name)
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("placeholder", placeholder)
        self._process_attr("list", list)
        self._process_attr("type", type)


class ins(BaseElement, GlobalAttrs, InsAttrs):
    """
    The <ins> element.
    Description: An addition to the document
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLModElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: InsAttrs.cite = None,
        datetime: InsAttrs.datetime = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "ins",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("cite", cite)
        self._process_attr("datetime", datetime)


class kbd(BaseElement, GlobalAttrs):
    """
    The <kbd> element.
    Description: User input
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "kbd",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class label(BaseElement, GlobalAttrs, LabelAttrs):
    """
    The <label> element.
    Description: Caption for a form control
    Categories: flow phrasing interactive palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLLabelElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        for_: LabelAttrs.for_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "label",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("for", for_)


class legend(BaseElement, GlobalAttrs):
    """
    The <legend> element.
    Description: Caption for fieldset
    Categories: none
    Parents: fieldset
    Children: phrasing heading content
    Interface: HTMLLegendElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "legend",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class li(BaseElement, GlobalAttrs, LiAttrs):
    """
    The <li> element.
    Description: List item
    Categories: none
    Parents: ol ul menu*
    Children: flow
    Interface: HTMLLIElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        value: LiAttrs.value = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "li",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("value", value)


class link(BaseElement, GlobalAttrs, LinkAttrs):
    """
    The <link> element.
    Description: Link metadata
    Categories: metadata flow* phrasing*
    Parents: head noscript* phrasing*
    Children: empty
    Interface: HTMLLinkElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        crossorigin: LinkAttrs.crossorigin = None,
        integrity: LinkAttrs.integrity = None,
        disabled: LinkAttrs.disabled = None,
        title: LinkAttrs.title = None,
        media: LinkAttrs.media = None,
        referrerpolicy: LinkAttrs.referrerpolicy = None,
        sizes: LinkAttrs.sizes = None,
        fetchpriority: LinkAttrs.fetchpriority = None,
        blocking: LinkAttrs.blocking = None,
        imagesrcset: LinkAttrs.imagesrcset = None,
        color: LinkAttrs.color = None,
        as_: LinkAttrs.as_ = None,
        rel: LinkAttrs.rel = None,
        type: LinkAttrs.type = None,
        hreflang: LinkAttrs.hreflang = None,
        href: LinkAttrs.href = None,
        imagesizes: LinkAttrs.imagesizes = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "link",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("integrity", integrity)
        self._process_attr("disabled", disabled)
        self._process_attr("title", title)
        self._process_attr("media", media)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("sizes", sizes)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("blocking", blocking)
        self._process_attr("imagesrcset", imagesrcset)
        self._process_attr("color", color)
        self._process_attr("as", as_)
        self._process_attr("rel", rel)
        self._process_attr("type", type)
        self._process_attr("hreflang", hreflang)
        self._process_attr("href", href)
        self._process_attr("imagesizes", imagesizes)


class main(BaseElement, GlobalAttrs):
    """
    The <main> element.
    Description: Container for the dominant contents of the document
    Categories: flow palpable
    Parents: flow*
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "main",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class map(BaseElement, GlobalAttrs, MapAttrs):
    """
    The <map> element.
    Description: Image map
    Categories: flow phrasing* palpable
    Parents: phrasing
    Children: transparent area*
    Interface: HTMLMapElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: MapAttrs.name = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "map",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("name", name)


class mark(BaseElement, GlobalAttrs):
    """
    The <mark> element.
    Description: Highlight
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "mark",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class menu(BaseElement, GlobalAttrs):
    """
    The <menu> element.
    Description: Menu of commands
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLMenuElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "menu",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class meta(BaseElement, GlobalAttrs, MetaAttrs):
    """
    The <meta> element.
    Description: Text metadata
    Categories: metadata flow* phrasing*
    Parents: head noscript* phrasing*
    Children: empty
    Interface: HTMLMetaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        charset: MetaAttrs.charset = None,
        http_equiv: MetaAttrs.http_equiv = None,
        name: MetaAttrs.name = None,
        content: MetaAttrs.content = None,
        media: MetaAttrs.media = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "meta",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("charset", charset)
        self._process_attr("http-equiv", http_equiv)
        self._process_attr("name", name)
        self._process_attr("content", content)
        self._process_attr("media", media)


class meter(BaseElement, GlobalAttrs, MeterAttrs):
    """
    The <meter> element.
    Description: Gauge
    Categories: flow phrasing labelable palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLMeterElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        value: MeterAttrs.value = None,
        low: MeterAttrs.low = None,
        min: MeterAttrs.min = None,
        optimum: MeterAttrs.optimum = None,
        high: MeterAttrs.high = None,
        max: MeterAttrs.max = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "meter",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("value", value)
        self._process_attr("low", low)
        self._process_attr("min", min)
        self._process_attr("optimum", optimum)
        self._process_attr("high", high)
        self._process_attr("max", max)


class nav(BaseElement, GlobalAttrs):
    """
    The <nav> element.
    Description: Section with navigational links
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "nav",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class noscript(BaseElement, GlobalAttrs):
    """
    The <noscript> element.
    Description: Fallback content for script
    Categories: metadata flow phrasing
    Parents: head* phrasing*
    Children: varies*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "noscript",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class object(BaseElement, GlobalAttrs, ObjectAttrs):
    """
    The <object> element.
    Description: Image, child navigable, or plugin
    Categories: flow phrasing embedded interactive* listed form-associated palpable
    Parents: phrasing
    Children: transparent
    Interface: HTMLObjectElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: ObjectAttrs.height = None,
        width: ObjectAttrs.width = None,
        data: ObjectAttrs.data = None,
        name: ObjectAttrs.name = None,
        type: ObjectAttrs.type = None,
        form: ObjectAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "object",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("height", height)
        self._process_attr("width", width)
        self._process_attr("data", data)
        self._process_attr("name", name)
        self._process_attr("type", type)
        self._process_attr("form", form)


class ol(BaseElement, GlobalAttrs, OlAttrs):
    """
    The <ol> element.
    Description: Ordered list
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLOListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        type: OlAttrs.type = None,
        reversed: OlAttrs.reversed = None,
        start: OlAttrs.start = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "ol",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("type", type)
        self._process_attr("reversed", reversed)
        self._process_attr("start", start)


class optgroup(BaseElement, GlobalAttrs, OptgroupAttrs):
    """
    The <optgroup> element.
    Description: Group of options in a list box
    Categories: none
    Parents: select
    Children: option script-supporting elements
    Interface: HTMLOptGroupElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: OptgroupAttrs.disabled = None,
        label: OptgroupAttrs.label = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "optgroup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("label", label)


class option(BaseElement, GlobalAttrs, OptionAttrs):
    """
    The <option> element.
    Description: Option in a list box or combo box control
    Categories: none
    Parents: select datalist optgroup
    Children: text*
    Interface: HTMLOptionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: OptionAttrs.disabled = None,
        label: OptionAttrs.label = None,
        selected: OptionAttrs.selected = None,
        value: OptionAttrs.value = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "option",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("label", label)
        self._process_attr("selected", selected)
        self._process_attr("value", value)


class output(BaseElement, GlobalAttrs, OutputAttrs):
    """
    The <output> element.
    Description: Calculated output value
    Categories: flow phrasing listed labelable resettable form-associated palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLOutputElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        for_: OutputAttrs.for_ = None,
        name: OutputAttrs.name = None,
        form: OutputAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "output",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("for", for_)
        self._process_attr("name", name)
        self._process_attr("form", form)


class p(BaseElement, GlobalAttrs):
    """
    The <p> element.
    Description: Paragraph
    Categories: flow palpable
    Parents: flow
    Children: phrasing
    Interface: HTMLParagraphElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "p",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class picture(BaseElement, GlobalAttrs):
    """
    The <picture> element.
    Description: Image
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: source* one img script-supporting elements
    Interface: HTMLPictureElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "picture",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class pre(BaseElement, GlobalAttrs):
    """
    The <pre> element.
    Description: Block of preformatted text
    Categories: flow palpable
    Parents: flow
    Children: phrasing
    Interface: HTMLPreElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "pre",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class progress(BaseElement, GlobalAttrs, ProgressAttrs):
    """
    The <progress> element.
    Description: Progress bar
    Categories: flow phrasing labelable palpable
    Parents: phrasing
    Children: phrasing*
    Interface: HTMLProgressElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        max: ProgressAttrs.max = None,
        value: ProgressAttrs.value = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "progress",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("max", max)
        self._process_attr("value", value)


class q(BaseElement, GlobalAttrs, QAttrs):
    """
    The <q> element.
    Description: Quotation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLQuoteElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        cite: QAttrs.cite = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "q",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("cite", cite)


class rp(BaseElement, GlobalAttrs):
    """
    The <rp> element.
    Description: Parenthesis for ruby annotation text
    Categories: none
    Parents: ruby
    Children: text
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "rp",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class rt(BaseElement, GlobalAttrs):
    """
    The <rt> element.
    Description: Ruby annotation text
    Categories: none
    Parents: ruby
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "rt",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class ruby(BaseElement, GlobalAttrs):
    """
    The <ruby> element.
    Description: Ruby annotation(s)
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing rt rp*
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "ruby",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class s(BaseElement, GlobalAttrs):
    """
    The <s> element.
    Description: Inaccurate text
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "s",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class samp(BaseElement, GlobalAttrs):
    """
    The <samp> element.
    Description: Computer output
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "samp",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class script(BaseElement, GlobalAttrs, ScriptAttrs):
    """
    The <script> element.
    Description: Embedded script
    Categories: metadata flow phrasing script-supporting
    Parents: head phrasing script-supporting
    Children: script, data, or script documentation*
    Interface: HTMLScriptElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        crossorigin: ScriptAttrs.crossorigin = None,
        integrity: ScriptAttrs.integrity = None,
        async_: ScriptAttrs.async_ = None,
        src: ScriptAttrs.src = None,
        referrerpolicy: ScriptAttrs.referrerpolicy = None,
        fetchpriority: ScriptAttrs.fetchpriority = None,
        blocking: ScriptAttrs.blocking = None,
        defer: ScriptAttrs.defer = None,
        nomodule: ScriptAttrs.nomodule = None,
        type: ScriptAttrs.type = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "script",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("integrity", integrity)
        self._process_attr("async", async_)
        self._process_attr("src", src)
        self._process_attr("referrerpolicy", referrerpolicy)
        self._process_attr("fetchpriority", fetchpriority)
        self._process_attr("blocking", blocking)
        self._process_attr("defer", defer)
        self._process_attr("nomodule", nomodule)
        self._process_attr("type", type)


class search(BaseElement, GlobalAttrs):
    """
    The <search> element.
    Description: Container for search controls
    Categories: flow palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "search",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class section(BaseElement, GlobalAttrs):
    """
    The <section> element.
    Description: Generic document or application section
    Categories: flow sectioning palpable
    Parents: flow
    Children: flow
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "section",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class select(BaseElement, GlobalAttrs, SelectAttrs):
    """
    The <select> element.
    Description: List box control
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable
    Parents: phrasing
    Children: option optgroup script-supporting elements
    Interface: HTMLSelectElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: SelectAttrs.disabled = None,
        required: SelectAttrs.required = None,
        multiple: SelectAttrs.multiple = None,
        size: SelectAttrs.size = None,
        name: SelectAttrs.name = None,
        autocomplete: SelectAttrs.autocomplete = None,
        form: SelectAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "select",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("required", required)
        self._process_attr("multiple", multiple)
        self._process_attr("size", size)
        self._process_attr("name", name)
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("form", form)


class slot(BaseElement, GlobalAttrs, SlotAttrs):
    """
    The <slot> element.
    Description: Shadow tree slot
    Categories: flow phrasing
    Parents: phrasing
    Children: transparent
    Interface: HTMLSlotElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        name: SlotAttrs.name = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "slot",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("name", name)


class small(BaseElement, GlobalAttrs):
    """
    The <small> element.
    Description: Side comment
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "small",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class source(BaseElement, GlobalAttrs, SourceAttrs):
    """
    The <source> element.
    Description: Image source for img or media source for video or audio
    Categories: none
    Parents: picture video audio
    Children: empty
    Interface: HTMLSourceElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        height: SourceAttrs.height = None,
        width: SourceAttrs.width = None,
        src: SourceAttrs.src = None,
        sizes: SourceAttrs.sizes = None,
        srcset: SourceAttrs.srcset = None,
        type: SourceAttrs.type = None,
        media: SourceAttrs.media = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "source",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("height", height)
        self._process_attr("width", width)
        self._process_attr("src", src)
        self._process_attr("sizes", sizes)
        self._process_attr("srcset", srcset)
        self._process_attr("type", type)
        self._process_attr("media", media)


class span(BaseElement, GlobalAttrs):
    """
    The <span> element.
    Description: Generic phrasing container
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLSpanElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "span",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class strong(BaseElement, GlobalAttrs):
    """
    The <strong> element.
    Description: Importance
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "strong",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class style(BaseElement, GlobalAttrs, StyleAttrs):
    """
    The <style> element.
    Description: Embedded styling information
    Categories: metadata
    Parents: head noscript*
    Children: text*
    Interface: HTMLStyleElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        blocking: StyleAttrs.blocking = None,
        title: StyleAttrs.title = None,
        media: StyleAttrs.media = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "style",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("blocking", blocking)
        self._process_attr("title", title)
        self._process_attr("media", media)


class sub(BaseElement, GlobalAttrs):
    """
    The <sub> element.
    Description: Subscript
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "sub",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class summary(BaseElement, GlobalAttrs):
    """
    The <summary> element.
    Description: Caption for details
    Categories: none
    Parents: details
    Children: phrasing heading content
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "summary",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class sup(BaseElement, GlobalAttrs):
    """
    The <sup> element.
    Description: Superscript
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "sup",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class svg(BaseElement, GlobalAttrs):
    """
    The <svg> element.
    Description: SVG root
    Categories: flow phrasing embedded palpable
    Parents: phrasing
    Children: per [SVG]
    Interface: SVGSVGElement
    Documentation: None
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "svg",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class table(BaseElement, GlobalAttrs):
    """
    The <table> element.
    Description: Table
    Categories: flow palpable
    Parents: flow
    Children: caption* colgroup* thead* tbody* tfoot* tr* script-supporting elements
    Interface: HTMLTableElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "table",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class tbody(BaseElement, GlobalAttrs):
    """
    The <tbody> element.
    Description: Group of rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "tbody",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class td(BaseElement, GlobalAttrs, TdAttrs):
    """
    The <td> element.
    Description: Table cell
    Categories: none
    Parents: tr
    Children: flow
    Interface: HTMLTableCellElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        colspan: TdAttrs.colspan = None,
        rowspan: TdAttrs.rowspan = None,
        headers: TdAttrs.headers = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "td",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("colspan", colspan)
        self._process_attr("rowspan", rowspan)
        self._process_attr("headers", headers)


class template(BaseElement, GlobalAttrs, TemplateAttrs):
    """
    The <template> element.
    Description: Template
    Categories: metadata flow phrasing script-supporting
    Parents: metadata phrasing script-supporting colgroup*
    Children: empty
    Interface: HTMLTemplateElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        shadowrootclonable: TemplateAttrs.shadowrootclonable = None,
        shadowrootmode: TemplateAttrs.shadowrootmode = None,
        shadowrootdelegatesfocus: TemplateAttrs.shadowrootdelegatesfocus = None,
        shadowrootserializable: TemplateAttrs.shadowrootserializable = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "template",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("shadowrootclonable", shadowrootclonable)
        self._process_attr("shadowrootmode", shadowrootmode)
        self._process_attr("shadowrootdelegatesfocus", shadowrootdelegatesfocus)
        self._process_attr("shadowrootserializable", shadowrootserializable)


class textarea(BaseElement, GlobalAttrs, TextareaAttrs):
    """
    The <textarea> element.
    Description: Multiline text controls
    Categories: flow phrasing interactive listed labelable submittable resettable form-associated palpable
    Parents: phrasing
    Children: text
    Interface: HTMLTextAreaElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        disabled: TextareaAttrs.disabled = None,
        required: TextareaAttrs.required = None,
        dirname: TextareaAttrs.dirname = None,
        rows: TextareaAttrs.rows = None,
        cols: TextareaAttrs.cols = None,
        minlength: TextareaAttrs.minlength = None,
        name: TextareaAttrs.name = None,
        readonly: TextareaAttrs.readonly = None,
        maxlength: TextareaAttrs.maxlength = None,
        autocomplete: TextareaAttrs.autocomplete = None,
        placeholder: TextareaAttrs.placeholder = None,
        wrap: TextareaAttrs.wrap = None,
        form: TextareaAttrs.form = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "textarea",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("disabled", disabled)
        self._process_attr("required", required)
        self._process_attr("dirname", dirname)
        self._process_attr("rows", rows)
        self._process_attr("cols", cols)
        self._process_attr("minlength", minlength)
        self._process_attr("name", name)
        self._process_attr("readonly", readonly)
        self._process_attr("maxlength", maxlength)
        self._process_attr("autocomplete", autocomplete)
        self._process_attr("placeholder", placeholder)
        self._process_attr("wrap", wrap)
        self._process_attr("form", form)


class tfoot(BaseElement, GlobalAttrs):
    """
    The <tfoot> element.
    Description: Group of footer rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "tfoot",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class th(BaseElement, GlobalAttrs, ThAttrs):
    """
    The <th> element.
    Description: Table header cell
    Categories: interactive*
    Parents: tr
    Children: flow*
    Interface: HTMLTableCellElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        colspan: ThAttrs.colspan = None,
        abbr: ThAttrs.abbr = None,
        scope: ThAttrs.scope = None,
        headers: ThAttrs.headers = None,
        rowspan: ThAttrs.rowspan = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "th",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("colspan", colspan)
        self._process_attr("abbr", abbr)
        self._process_attr("scope", scope)
        self._process_attr("headers", headers)
        self._process_attr("rowspan", rowspan)


class thead(BaseElement, GlobalAttrs):
    """
    The <thead> element.
    Description: Group of heading rows in a table
    Categories: none
    Parents: table
    Children: tr script-supporting elements
    Interface: HTMLTableSectionElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "thead",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class time(BaseElement, GlobalAttrs, TimeAttrs):
    """
    The <time> element.
    Description: Machine-readable equivalent of date- or time-related data
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLTimeElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        datetime: TimeAttrs.datetime = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "time",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("datetime", datetime)


class title(BaseElement, GlobalAttrs):
    """
    The <title> element.
    Description: Document title
    Categories: metadata
    Parents: head
    Children: text*
    Interface: HTMLTitleElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "title",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class tr(BaseElement, GlobalAttrs):
    """
    The <tr> element.
    Description: Table row
    Categories: none
    Parents: table thead tbody tfoot
    Children: th* td script-supporting elements
    Interface: HTMLTableRowElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "tr",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class track(BaseElement, GlobalAttrs, TrackAttrs):
    """
    The <track> element.
    Description: Timed text track
    Categories: none
    Parents: audio video
    Children: empty
    Interface: HTMLTrackElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        srclang: TrackAttrs.srclang = None,
        src: TrackAttrs.src = None,
        label: TrackAttrs.label = None,
        default: TrackAttrs.default = None,
        kind: TrackAttrs.kind = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "track",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("srclang", srclang)
        self._process_attr("src", src)
        self._process_attr("label", label)
        self._process_attr("default", default)
        self._process_attr("kind", kind)


class u(BaseElement, GlobalAttrs):
    """
    The <u> element.
    Description: Unarticulated annotation
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "u",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class ul(BaseElement, GlobalAttrs):
    """
    The <ul> element.
    Description: List
    Categories: flow palpable*
    Parents: flow
    Children: li script-supporting elements
    Interface: HTMLUListElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "ul",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class var(BaseElement, GlobalAttrs):
    """
    The <var> element.
    Description: Variable
    Categories: flow phrasing palpable
    Parents: phrasing
    Children: phrasing
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "var",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )


class video(BaseElement, GlobalAttrs, VideoAttrs):
    """
    The <video> element.
    Description: Video player
    Categories: flow phrasing embedded interactive palpable
    Parents: phrasing
    Children: source* track* transparent*
    Interface: HTMLVideoElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        crossorigin: VideoAttrs.crossorigin = None,
        height: VideoAttrs.height = None,
        controls: VideoAttrs.controls = None,
        width: VideoAttrs.width = None,
        src: VideoAttrs.src = None,
        loop: VideoAttrs.loop = None,
        muted: VideoAttrs.muted = None,
        poster: VideoAttrs.poster = None,
        playsinline: VideoAttrs.playsinline = None,
        preload: VideoAttrs.preload = None,
        autoplay: VideoAttrs.autoplay = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "video",
            void_element=False,
            id=id,
            class_=class_,
            attrs=attrs,
        )
        self._process_attr("crossorigin", crossorigin)
        self._process_attr("height", height)
        self._process_attr("controls", controls)
        self._process_attr("width", width)
        self._process_attr("src", src)
        self._process_attr("loop", loop)
        self._process_attr("muted", muted)
        self._process_attr("poster", poster)
        self._process_attr("playsinline", playsinline)
        self._process_attr("preload", preload)
        self._process_attr("autoplay", autoplay)


class wbr(BaseElement, GlobalAttrs):
    """
    The <wbr> element.
    Description: Line breaking opportunity
    Categories: flow phrasing
    Parents: phrasing
    Children: empty
    Interface: HTMLElement
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr
    """

    attr_type: TypeAlias = Union[dict, list[BaseAttribute]]

    def __init__(
        self,
        id: GlobalAttrs.id = None,
        class_: GlobalAttrs.class_ = None,
        attrs: attr_type = None,
        children: list = None,
    ) -> None:
        super().__init__(
            "wbr",
            void_element=True,
            id=id,
            class_=class_,
            attrs=attrs,
        )
